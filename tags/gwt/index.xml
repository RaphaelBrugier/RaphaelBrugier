<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raphael Brugier</title>
    <link>http://raphaelbrugier.github.io/tags/gwt/index.xml</link>
    <description>Recent content on Raphael Brugier</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://raphaelbrugier.github.io/tags/gwt/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Wordpress login form with GWT and UiBinder</title>
      <link>http://raphaelbrugier.github.io/blog/wordpress-login-form-with-gwt-and-uibinder/</link>
      <pubDate>Sun, 16 Jan 2011 16:40:14 +0000</pubDate>
      
      <guid>http://raphaelbrugier.github.io/blog/wordpress-login-form-with-gwt-and-uibinder/</guid>
      <description>&lt;p&gt;Following my previous post, I have decided to rewrite the example of the Wordpress login form using only UiBinder and the ClientBundle/Css features that comes with GWT. This example demonstrate how you can use only htmlPanel and UiBinder to build a perfect pixel Ui just with hmtl/css and no gwt panel.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&#34;http://raphaelbrugier.github.io/posts/wpLogin/WpLogin.html&#34;&gt;see the result there.&lt;/a&gt; Or you can &lt;a href=&#34;http://raphaelbrugier.github.io/posts/wpLogin/wpLogin.zip&#34;&gt;download and run the eclipse project from there&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To start I&amp;rsquo;ve just copied the html from my wordpress login page into the htmlPanel. Then I&amp;rsquo;ve renamed all the &amp;ldquo;id&amp;rdquo; on the divs into class, because gwt will only compile the css declared in the UiBinder into class css. I&amp;rsquo;ve replaced the &amp;lt;form&amp;gt; by a &amp;lt;div&amp;gt;. I&amp;rsquo;ve added some more styles and the image directly in the UiBinder, so GWT can compress and obfuscate it. In the application.css I&amp;rsquo;ve just added two styles for the body.&lt;/p&gt;

&lt;p&gt;The main file that you want to see is WpForm.ui.xml :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE ui:UiBinder SYSTEM &amp;quot;http://dl.google.com/gwt/DTD/xhtml.ent&amp;quot;&amp;gt;
&amp;lt;ui:UiBinder xmlns:ui=&#39;urn:ui:com.google.gwt.uibinder&#39;
	xmlns:g=&#39;urn:import:com.google.gwt.user.client.ui&#39;&amp;gt;

	&amp;lt;ui:image field=&#39;logo&#39; src=&#39;logo-login.gif&#39; /&amp;gt;

	&amp;lt;ui:style&amp;gt;
		.form {
			margin-left: 8px;
			padding: 16px 16px 40px 16px;
			font-weight: normal;
			-moz-border-radius: 11px;
			-khtml-border-radius: 11px;
			-webkit-border-radius: 11px;
			border-radius: 5px;
			background: #fff;
			border: 1px solid #e5e5e5;
			-moz-box-shadow: rgba(200, 200, 200, 1) 0 4px 18px;
			-webkit-box-shadow: rgba(200, 200, 200, 1) 0 4px 18px;
			-khtml-box-shadow: rgba(200, 200, 200, 1) 0 4px 18px;
			box-shadow: rgba(200, 200, 200, 1) 0 4px 18px;
			font: 11px &amp;quot;Lucida Grande&amp;quot;, Verdana, Arial, &amp;quot;Bitstream Vera Sans&amp;quot;,
				sans-serif;
		}
		
		.form .forgetmenot {
			font-weight: normal;
			float: left;
			margin-bottom: 0;
		}
		
		.button-primary {
			background: #2379a1;
			color: #ffffff;
			font-family: &amp;quot;Lucida Grande&amp;quot;, Verdana, Arial, &amp;quot;Bitstream Vera Sans&amp;quot;,
				sans-serif;
			font-weight: bold;
			text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.3);
			padding: 3px 10px;
			border: none;
			font-size: 12px;
			border-width: 1px;
			border-style: solid;
			-moz-border-radius: 11px;
			-khtml-border-radius: 11px;
			-webkit-border-radius: 11px;
			border-radius: 11px;
			cursor: pointer;
			text-decoration: none;
			margin-top: -3px;
		}
		
		.login .form p {
			margin-bottom: 0px;
		}
		
		@external gwt-Label;
		.login .gwt-Label {
			color: #777;
			font-size: 13px;
		}
		
		.form .forgetmenot .gwt-Label {
			font-size: 11px;
			line-height: 19px;
			color: #777;
			float: right;
			margin-left: 5px;
		}
		
		.form .submit {
			float: right;
		}
		
		.form p {
			margin-bottom: 24px;
		}
		
		@sprite .login h1 a {
			gwt-image: &#39;logo&#39;;
			width: 326px;
			height: 67px;
			text-indent: -9999px;
			overflow: hidden;
			padding-bottom: 15px;
			display: block;
		}
		
		.nav {
			text-shadow: rgba(255, 255, 255, 1) 0 1px 0;
			margin: 0 0 0 8px;
			padding: 16px;
		}
		
		.nav a {
			color: #21759B;
		}
		
		.input {
			font-size: 24px;
			width: 97%;
			padding: 3px;
			margin-top: 2px;
			margin-right: 6px;
			margin-bottom: 16px;
			border: 1px solid #e5e5e5;
			background: #fbfbfb;
			color: #555;
		}
		
		.backtoblog {
			position: absolute;
			top: 0;
			left: 0;
			border-bottom: #c6c6c6 1px solid;
			background: #d9d9d9;
			background: -moz-linear-gradient(bottom, #d7d7d7, #e4e4e4);
			background: -webkit-gradient(linear, left bottom, left top, from(#d7d7d7),
				to(#e4e4e4) );
			height: 30px;
			width: 100%;
		}
		
		.backtoblog a {
			text-decoration: none;
			display: block;
			padding: 8px 0 0 15px;
			color: #464646;
		}
		
		.login {
			width: 320px;
			margin: 7em auto;
			padding-top: 30px;
		}
	&amp;lt;/ui:style&amp;gt;

	&amp;lt;g:HTMLPanel&amp;gt;
		&amp;lt;div class=&amp;quot;{style.login}&amp;quot;&amp;gt;
			&amp;lt;h1&amp;gt;
				&amp;lt;a title=&amp;quot;Propulsé par WordPress&amp;quot; href=&amp;quot;http://wordpress.org/&amp;quot;&amp;gt;Le blog de Raph&amp;lt;/a&amp;gt;
			&amp;lt;/h1&amp;gt;
			&amp;lt;div class=&amp;quot;{style.form}&amp;quot;&amp;gt;
				&amp;lt;p&amp;gt;
					&amp;lt;g:Label&amp;gt;Login&amp;lt;/g:Label&amp;gt;
					&amp;lt;br /&amp;gt;
					&amp;lt;g:TextBox styleName=&amp;quot;{style.input}&amp;quot; /&amp;gt;
				&amp;lt;/p&amp;gt;
				&amp;lt;p&amp;gt;
					&amp;lt;g:Label&amp;gt;Password&amp;lt;/g:Label&amp;gt;
					&amp;lt;br /&amp;gt;
					&amp;lt;g:TextBox styleName=&amp;quot;{style.input}&amp;quot; /&amp;gt;
				&amp;lt;/p&amp;gt;
				&amp;lt;p class=&amp;quot;{style.forgetmenot}&amp;quot;&amp;gt;
					&amp;lt;g:CheckBox&amp;gt;&amp;lt;/g:CheckBox&amp;gt;
					&amp;lt;g:Label&amp;gt; Se souvenir de moi&amp;lt;/g:Label&amp;gt;
				&amp;lt;/p&amp;gt;
				&amp;lt;p class=&amp;quot;{style.submit}&amp;quot;&amp;gt;
					&amp;lt;g:Button styleName=&amp;quot;{style.button-primary}&amp;quot;&amp;gt;Connect&amp;lt;/g:Button&amp;gt;

				&amp;lt;/p&amp;gt;
			&amp;lt;/div&amp;gt;

			&amp;lt;p class=&amp;quot;{style.nav}&amp;quot;&amp;gt;
				&amp;lt;a title=&amp;quot;Récupération de mot de passe&amp;quot;
					href=&amp;quot;http://{{ site.baseurl }}&amp;quot;&amp;gt;Mot de passe oublié ?&amp;lt;/a&amp;gt;
			&amp;lt;/p&amp;gt;
		&amp;lt;/div&amp;gt;
		&amp;lt;p class=&amp;quot;{style.backtoblog}&amp;quot;&amp;gt;
			&amp;lt;a title=&amp;quot;Êtes-vous perdu(e)?&amp;quot; href=&amp;quot;{{ site.baseurl }}&amp;quot;&amp;gt;← Retour sur Le blog de
				Raph&amp;lt;/a&amp;gt;
		&amp;lt;/p&amp;gt;
	&amp;lt;/g:HTMLPanel&amp;gt;
&amp;lt;/ui:UiBinder&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WpLogin.css  :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    * {
        margin: 0;
        padding: 0;
    }
    
    body {
        font: 11px &amp;quot;Lucida Grande&amp;quot;, Verdana, Arial, &amp;quot;Bitstream Vera Sans&amp;quot;,
            sans-serif !important;
            background-color: #f9f9f9 !important;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s all !  So now, please don&amp;rsquo;t follow the advices of writing all your html in a big static String and learn how to use the tool !&lt;/p&gt;

&lt;p&gt;Happy coding !&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://raphaelbrugier.github.io/posts/wpLogin/WpLogin.html&#34;&gt;Result page&lt;/a&gt; Or you can &lt;a href=&#34;http://raphaelbrugier.github.io/posts/wpLogin/wpLogin.zip&#34;&gt;Download the eclipse project&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GWT and HTML under control</title>
      <link>http://raphaelbrugier.github.io/blog/gwt-and-html-under-control/</link>
      <pubDate>Sun, 16 Jan 2011 16:34:48 +0000</pubDate>
      
      <guid>http://raphaelbrugier.github.io/blog/gwt-and-html-under-control/</guid>
      <description>&lt;p&gt;In the past weeks I&amp;rsquo;ve seen two articles about making clean design with GWT. That was really interesting, but something still stugling me a lot. Both authors agreed not to use  layout widgets provided by GWT to build UI neither UiBinder but use instead a big ugly static String to store an HTML code/&lt;/p&gt;

&lt;p&gt;Take a closer look at those two articles and come back later to find out a better way to improve your design based on GWT.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i-proving.ca/space/Technologies/GWT/Lightweight+GWT+layouts&#34;&gt;Lightweight GWT layouts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.zackgrossbart.com/hackito/tags-first-gwt/&#34;&gt;Tags first GWT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The purpose is to write a clean HTML with the least number of tags and have that HTML code under control with only CSS. I do agree that using the old GWT layout system is a really mess producing a lot of tables and ugly code.&lt;/p&gt;

&lt;p&gt;However, since GWT 2.0, Google brought us &lt;a href=&#34;http://www.google.com/events/io/2010/sessions/gwt-ui-overhaul.html&#34;&gt;a better layout system&lt;/a&gt; with the widgets positionned using only div and css. With this system you can normally reach a clean design without generating table tags and a lof HTML mess.&lt;/p&gt;

&lt;p&gt;But since the web is all about simple html and css, I agree with Zack Grossbart that you need to have a perfect control of your UI with the least html tags and just css.&lt;/p&gt;

&lt;p&gt;But with the version 2.0 GWT also introduces a wonderful feature called UiBinder. With UiBinder you can describe in a declarative way your design separated from your logic. You can especially use the HtmlPanel panel to mix up classic HTML/CSS and GWT widgets. This is exactly what they wanted to do ! Use classic HTML and CSS to describe the UI and GWT only for the control. By using UiBinder they can take advantage of a powerfull tool having a built-in feature to bind GWT widgets from the xml to the Java and many mores.&lt;/p&gt;

&lt;p&gt;Putting your html within a static String is not really that clean and maintainable. So please, for God sake, do not do it ! &lt;a href=&#34;http://code.google.com/intl/fr/webtoolkit/doc/latest/DevGuideUiBinder.html&#34;&gt;Learn the API&lt;/a&gt; and &lt;a href=&#34;http://www.google.com/events/io/2010/sessions.html#GWT&#34;&gt;follow the best practices&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[update] I&amp;rsquo;ve now coded a rewrite of the wordpress login page example just by using UiBinder and the HtmlPanel, see &lt;a href=&#34;http://raphaelbrugier.github.io/blog/wordpress-login-form-with-gwt-and-uibinder/&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How-To change the style of your GWT 2.1 ValuePicker ?</title>
      <link>http://raphaelbrugier.github.io/blog/how-to-change-the-style-of-your-gwt-2-1-valuepicker/</link>
      <pubDate>Mon, 20 Dec 2010 21:59:06 +0000</pubDate>
      
      <guid>http://raphaelbrugier.github.io/blog/how-to-change-the-style-of-your-gwt-2-1-valuepicker/</guid>
      <description>&lt;p&gt;This class demonstrate how-to change the style of the GWT 2.1 ValuePicker.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Main extends Composite {
	
	private static class DefaultCell&amp;lt;T&amp;gt; extends AbstractCell&amp;lt;T&amp;gt; {
	    private final Renderer&amp;lt;T&amp;gt; renderer;

	    DefaultCell(Renderer&amp;lt;T&amp;gt; renderer) {
	      this.renderer = renderer;
	    }

	    @Override
	    public void render(Context context, T value, SafeHtmlBuilder sb) {
	      sb.appendEscaped(renderer.render(value));
	    }
	  }
	
	public interface MyResources extends CellList.Resources {
	    @Source(&amp;quot;myStyle.css&amp;quot;)
	    Style cellListStyle();
	}
	
	Renderer&amp;lt;String&amp;gt; renderer = new AbstractRenderer&amp;lt;String&amp;gt;() {
		@Override
		public String render(String object) {
			return object;
		}
	};
	
	private static MyResources RESOURCES = GWT.create(MyResources.class);

	private static final Binder binder = GWT.create(Binder.class);
	
	@UiField FlowPanel panel;

	interface Binder extends UiBinder&amp;lt;Widget, Main&amp;gt; {
	}

	public Main() {
		initWidget(binder.createAndBindUi(this));

		CellList&amp;lt;String&amp;gt; cellList = new CellList&amp;lt;String&amp;gt;(new DefaultCell&amp;lt;String&amp;gt;(renderer), RESOURCES);

		ValuePicker&amp;lt;String&amp;gt; valueBox = new ValuePicker&amp;lt;String&amp;gt;(cellList);
		valueBox.setAcceptableValues(Arrays.asList(&amp;quot;HELLO&amp;quot;, &amp;quot;WORLD&amp;quot;));
		panel.add(valueBox);
	}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Gwt – Surcharger les styles par défauts</title>
      <link>http://raphaelbrugier.github.io/blog/gwt-surcharger-les-styles-par-defauts/</link>
      <pubDate>Sat, 11 Sep 2010 12:55:17 +0000</pubDate>
      
      <guid>http://raphaelbrugier.github.io/blog/gwt-surcharger-les-styles-par-defauts/</guid>
      <description>&lt;p&gt;La version 2.0 de Gwt à introduit l&amp;rsquo;interface CssResource qui permet de lier des classes css à des widgets Gwt en java. Cette interface permet de bénéficier d&amp;rsquo;optimisation à la compilation et de brouiller les noms des classes pour éviter les collisions. Elle enrichi aussi la syntaxe Css, par exemple en permettant de déclarer des constantes. Il est ainsi très facile de déclarer des feuilles Css qui joueront le rôle de feuille parent de laquelle hériterons les feuilles spécifiques à chaque partie de l&amp;rsquo;interface. Cela permet par exemple de créer très facilement plusieurs thèmes.&lt;/p&gt;

&lt;p&gt;Cependant, il n&amp;rsquo;est parfois pas aisé de surchargé les styles du thème par défaut. En effet, l&amp;rsquo;interface les styles déclarés avec CssResources sont injectés uniquement quand nécessaire, et parfois après ceux de la feuille de thème par défaut qui les surchargent donc. Pour pallier à ce problème, il existe une astuce c&amp;rsquo;est d&amp;rsquo;utiliser l&amp;rsquo;annotation @External&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface WidgetCss extends CssResource {
        public void myButtonStyle();
}

public interface WidgetResources extends ClientBundle {
        public WidgetResources INSTANCE = GWT.create(WidgetResources.class);

        WidgetCss css();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fichier css :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@External .gwt-Button
.myButtonStyle .gwt-Button{
    color: #424242;
    font-size: 13px;
    cursor: pointer;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Utilisation :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public MyWidget() {
    Button button = new Button(&amp;quot;click me !&amp;quot;);
    button.addStyleName(css().myButtonStyle());
}

/**
* @return Helper access to the css String;
*/
private WidgetResources css() {
    return WidgetResources.INSTANCE.css();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et voilà, la déclaration du thème par défaut gwt-button est maintenant surchargée par myButtonStyle.&lt;/p&gt;

&lt;p&gt;Le style ne sera pas surchargé par le thème par défaut, et il n&amp;rsquo;est pas nécessaire un moche hack avec par exemple &amp;ldquo;!important&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Bon gwt à tous !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google I/O 2010 – GWT’s UI overhaul</title>
      <link>http://raphaelbrugier.github.io/blog/google-io-2010-gwts-ui-overhaul/</link>
      <pubDate>Thu, 15 Jul 2010 20:28:53 +0000</pubDate>
      
      <guid>http://raphaelbrugier.github.io/blog/google-io-2010-gwts-ui-overhaul/</guid>
      <description>

&lt;p&gt;Le 19 et 20 mai 2010 avait lieu l&amp;rsquo;événement annuel de Google, le Google I/O à San Francisco. Près d&amp;rsquo;une centaine de présentations ont eu lieux et toutes étaient filmées ! Je débute donc une série de post pour résumer celles que je visionne, en particulier celles traitant de GWT et de Google App Engine.&lt;/p&gt;

&lt;h2 id=&#34;gwt-s-ui-overhaul&#34;&gt;GWT&amp;rsquo;S UI Overhaul&lt;/h2&gt;

&lt;h4 id=&#34;par-ray-rian-et-joel-webber&#34;&gt;Par Ray Rian et Joel  Webber.&lt;/h4&gt;

&lt;p&gt;Cette présentation  présente plus en détails les nouvelles façons de construire les  interfaces  avec la version 2.0 de GWT et introduit une partie de la  future 2.1. L’équipe de GWT nomme ces nouveautés UI overhaul.&lt;/p&gt;

&lt;p&gt;Elles sont  détaillées en 4 points :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UiBinder : La conception déclarative des  interfaces, qui permet de remplacer énormément de code java par un  fichier xml.&lt;/li&gt;
&lt;li&gt;ClientBundle : Permet de lier les ressources de l’application au code java, ainsi GWT réalise des optimisations.&lt;/li&gt;
&lt;li&gt;LayoutPanels : Présentation du nouveau système de rendu utilisant uniquement du html standard&lt;/li&gt;
&lt;li&gt;CellWidgets (2.1) : Les futurs widgets pour construire des tableaux ou des listes avec de très nombreuses données&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;uibinder&#34;&gt;UiBinder :&lt;/h3&gt;

&lt;p&gt;Le nouveau système de déclaration des interfaces avait été introduit avec Gwt 2.0, cette partie de la présentation rappelle seulement que UiBinder permet d&amp;rsquo;écrire beaucoup plus simplement les interfaces en supprimant le code inutile java. Pour l&amp;rsquo;utiliser dans mon projet, c&amp;rsquo;est un vrai bonheur !&lt;/p&gt;

&lt;p&gt;Par exemple, voici du code java :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    HorizontalPanel outer = new HorizontalPanel();
    VerticalPanel inner = new VerticalPanel();
    outer.setHorizontalAlignment(HorizontalPanel.ALIGN_RIGHT);
    inner.setHorizontalAlignment(HorizontalPanel.ALIGN_RIGHT);
    HorizontalPanel links = new HorizontalPanel();
    links.setSpacing(4);
    links.add(signOutLink);
    links.add(aboutLink);
    final Image logo = images.logo().createImage();
    outer.add(logo);
    outer.setCellHorizontalAlignment(logo, HorizontalPanel.ALIGN_LEFT);
    outer.add(inner);
    inner.add(new HTML(&amp;quot;**Welcome back, foo@example.com**&amp;quot;));
    inner.add(links);
    signOutLink.addClickHandler(this);
    aboutLink.addClickHandler(this);
    initWidget(outer);
    setStyleName(&amp;quot;mail-TopPanel&amp;quot;);
    links.setStyleName(&amp;quot;mail-TopPanelLinks&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et son équivalent UiBInder :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;g:htmlpanel&amp;gt;
    &amp;lt;div class=&amp;quot;{style.logo}&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;{style.statusDiv}&amp;quot;&amp;gt;
            &amp;lt;div&amp;gt;
                **Welcome back, foo@example.com**
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&amp;quot;{style.linksDiv}&amp;quot;&amp;gt;
                &amp;lt;g:anchor ui:field=&amp;quot;signOutLink&amp;quot;&amp;gt;Sign Out&amp;lt;/g:anchor&amp;gt;
                &amp;lt;g:anchor ui:field=&amp;quot;aboutLink&amp;quot;&amp;gt;About&amp;lt;/g:anchor&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;&amp;lt;/g:htmlpanel&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;client-bundle&#34;&gt;Client Bundle :&lt;/h3&gt;

&lt;p&gt;Une nouveauté au moins aussi important qu&amp;rsquo;UiBinder est le ClientBundle. L&amp;rsquo;interface ClientBundle permet de lier les  ressources de l’applications au code java. Ainsi GWT réalise des  optimisations. Par exemple les images peuvent être packagées et les  opérations de “sprites” directement réalisées.&lt;/p&gt;

&lt;p&gt;ClientBundle permet aussi de déclarer les propriétés css dans une interface et un fichier distinct qui seront packagé par Gwt. Cela permet là encore d&amp;rsquo;optimiser, d&amp;rsquo;obfusquer les noms css pour éviter la collision et aussi d&amp;rsquo;ajouter quelques propriétés Css, comme les expressions ou les constantes.&lt;/p&gt;

&lt;p&gt;De plus ClientBundle s&amp;rsquo;intègre parfaitement avec Uibinder et il est possible de déclarer une interface Css dans le fichier java dont l&amp;rsquo;implémentation est réalisée dans le fichier UiBinder.&lt;/p&gt;

&lt;h3 id=&#34;internationalisation-i18n&#34;&gt;Internationalisation (I18n)&lt;/h3&gt;

&lt;p&gt;UiBinder supporte désormais mieux l&amp;rsquo;internationalisation des widgets. Grâce à la balise &amp;lt;ui:msg&amp;gt;, il n&amp;rsquo;est plus nécessaire de déclarer une interface Message. Un gros travail a été effectué sur la documentation pour refléter tout ces changements, cf la &lt;a href=&#34;http://code.google.com/webtoolkit/doc/latest/DevGuideUiBinderI18n.html&#34;&gt;documentation I18n&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;layout-panels&#34;&gt;Layout Panels&lt;/h3&gt;

&lt;p&gt;L’ancien système de  layout était, selon les dire même de Ray Cromwell, un cauchemar. Le  système était statique et construit à base de table imbriquées ! De plus cela ne  fonctionnait pas en “standards mode“ seulement en “quirks mode”. Le &amp;ldquo;standards mode&amp;rdquo; étant le futur du web, html5, il devenait critique de pouvoir l&amp;rsquo;utiliser et de se passer du vieux positionnement à base de tables.&lt;/p&gt;

&lt;p&gt;L’alternative proposée  par les frameworks pour Gwt qui encapsulent des librairies Javascript,  type Gwt-ext, est souvent d’implémenter un nouveau système de layout. Ce  système totalement en Javascript rend souvent l’application très lente.&lt;/p&gt;

&lt;p&gt;La solution retenue  pour le nouveau système est d’utiliser des bloc div en position absolu  et du css. En effet, les propriétés Css : top left right bottom width  height permettent de positionner très exactement un bloc à l’intérieur  d’un autre.&lt;/p&gt;

&lt;p&gt;Voici par exemple le code UiBinder et son résultat html/css&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;     &amp;lt;g:docklayoutpanel unit=&amp;quot;EM&amp;quot;&amp;gt;
         &amp;lt;g:north size=&amp;quot;15&amp;quot;&amp;gt;
             &amp;lt;g:flowpanel&amp;gt;
                 &amp;lt;g:label&amp;gt;Header&amp;lt;/g:label&amp;gt;
             &amp;lt;/g:flowpanel&amp;gt;
         &amp;lt;/g:north&amp;gt;

         &amp;lt;g:west size=&amp;quot;15&amp;quot;&amp;gt;
             &amp;lt;g:flowpanel&amp;gt;
                 &amp;lt;g:button&amp;gt;Page 1&amp;lt;/g:button&amp;gt;
                 &amp;lt;g:button&amp;gt;Page 2&amp;lt;/g:button&amp;gt;
             &amp;lt;/g:flowpanel&amp;gt;
         &amp;lt;/g:west&amp;gt;

         &amp;lt;g:center&amp;gt;
             &amp;lt;g:htmlpanel&amp;gt;some html&amp;lt;/g:htmlpanel&amp;gt;
         &amp;lt;/g:center&amp;gt;
     &amp;lt;/g:docklayoutpanel&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div style=&amp;quot;position: absolute; left: 0px; top: 0px; right: 0px; bottom: 0px;&amp;quot;&amp;gt;
    &amp;lt;div style=&amp;quot;position: absolute; overflow: hidden; left: 0em; top: 0em; right: 0em; height: 15em;&amp;quot;&amp;gt;
        &amp;lt;div style=&amp;quot;position: absolute; left: 0px; top: 0px; right: 0px; bottom: 0px;&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;gwt-Label&amp;quot;&amp;gt;Header&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div style=&amp;quot;position: absolute; overflow: hidden; left: 0em; top: 15em; bottom: 0em; width: 15em;&amp;quot;&amp;gt;
        &amp;lt;div style=&amp;quot;position: absolute; left: 0px; top: 0px; right: 0px; bottom: 0px;&amp;quot;&amp;gt;
            &amp;lt;button type=&amp;quot;button&amp;quot; tabindex=&amp;quot;0&amp;quot; class=&amp;quot;Gohuy86A&amp;quot;&amp;gt;Page 1&amp;lt;/button&amp;gt;
            &amp;lt;button type=&amp;quot;button&amp;quot; tabindex=&amp;quot;0&amp;quot; class=&amp;quot;gwt-Button&amp;quot;&amp;gt;Page 2&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div style=&amp;quot;position: absolute; overflow: hidden; left: 15em; top: 15em; right: 0em; bottom: 0em;&amp;quot;&amp;gt;
        &amp;lt;div style=&amp;quot;position: absolute; left: 0px; top: 0px; right: 0px; bottom: 0px;&amp;quot;&amp;gt;some html&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On voit bien que les panels qui composent le dockLayout sont placés de façons statiques avec les propriétés css qui s&amp;rsquo;appliquent à un placement absolu.&lt;/p&gt;

&lt;h5 id=&#34;en-résumé&#34;&gt;En résumé&lt;/h5&gt;

&lt;p&gt;Ce que le nouveau système de layout permet :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Définir très exactement la structrure de l’interface de  l’application. Pour les widgets interne, on pourra continuer à les  définir en pur html/css classique.&lt;/li&gt;
&lt;li&gt;Travailler en “standard mode“&lt;/li&gt;
&lt;li&gt;Fonctionner sous IE6, (oui même le standards mode !)&lt;/li&gt;
&lt;li&gt;Supporter des animations. Par exemple en effet de transition entre les changements de panels.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Attention! Le nouveau système de layout n&amp;rsquo;est pas :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Un remplacement total  pour le système placement HTML. Si vous utilisez déjà avec succès des  placements en HTML/CSS alors continuez avec !&lt;/li&gt;
&lt;li&gt;Un système de layout  comme Swing/swt avec des “prefered size”. Ici le  système est plus simple  et les panels ne peuvent pas se redimensionner à  partir des tailles  “préférées“, c’est à dire négociée avec les panels  du même niveau.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cellwidgets-2-1&#34;&gt;CellWidgets (2.1)&lt;/h3&gt;

&lt;p&gt;La prochaine version de GWT, la 2.1, introduira entre autres de nouveaux widgets pour afficher des listes/tableaux comportements de nombreuses données. La particularité de ces widgets est de favoriser le html pur pour accélérer le rendu. En effet, l&amp;rsquo;utilisation des widgets classiques pour afficher de grandes liste entrainait un surcout, à cause du grand nombre de fonction javascript que ces widgets possèdent. Cela menait souvent à diminuer la fluidité de la page dans le navigateur.&lt;/p&gt;

&lt;p&gt;Les cellWidget sont un version simplifié du model MVC. La vue étend la classe Cell et possède une méthode onRender() qui retourne le html pour une cellule donnée en fonction du model qu&amp;rsquo;elle possède.&lt;/p&gt;

&lt;p&gt;Il existe déjà une application de démonstrations qui tire parti de ces nouveaux widgets :&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gwt-bikeshed.appspot.com/Expenses.html&#34;&gt;Expenses application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.google.com/url?sa=D&amp;amp;amp;q=http%3A%2F%2Fcode.google.com%2Fp%2Fgoogle-web-toolkit%2Fsource%2Fbrowse%2Fbranches%2F2.1%2Fbikeshed%2F%23bikeshed%2Fsrc%2Fcom%2Fgoogle%2Fgwt%2Fsample%2Fexpenses%2Fgwt&#34;&gt;Le code source&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion :&lt;/h3&gt;

&lt;p&gt;Ma conclusion personnelle sur cette conférence est qu&amp;rsquo;il ne suffit pas d&amp;rsquo;utiliser GWT 2.0 pour compiler pour profiter de toute sa puissance. Comme toute toolbox, il faut prendre le temps de faire le tour de l&amp;rsquo;api pour la maîtriser.&lt;/p&gt;

&lt;h3 id=&#34;sources&#34;&gt;Sources :&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://code.google.com/intl/fr/events/io/2010/sessions/gwt-ui-overhaul.html&#34;&gt;Page de la conférence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=g2XclEOJdIc&amp;amp;feature=PlayList&amp;amp;p=F01F46882D8A90AF&amp;amp;playnext_from=PL&amp;amp;index=4&#34;&gt;Vidéos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dl.google.com/googleio/2010/gwt-ui-overhaul.pdf&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://code.google.com/intl/fr/events/io/2010/sessions/gwt-ui-overhaul.html&#34;&gt;Wave de discussion sur la conférence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://wave.google.com/wave/waveref/googlewave.com/w+zqS7G7ZkBwa&#34;&gt;Live Wave (notes prises par un Googler pendant la conférence)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GTAC 2009 – Lessons learned from testing GWT applications</title>
      <link>http://raphaelbrugier.github.io/blog/gtac-2009-lessons-learned-from-testing-gwt-applications/</link>
      <pubDate>Sun, 30 May 2010 16:00:20 +0000</pubDate>
      
      <guid>http://raphaelbrugier.github.io/blog/gtac-2009-lessons-learned-from-testing-gwt-applications/</guid>
      <description>

&lt;p&gt;Les 21 et 22 octobre 2009 avait lieux à Zurich la conférence annuelle de Google sur les test automatisées.&lt;/p&gt;

&lt;p&gt;Parmi toutes les conférences proposées, une m&amp;rsquo;intéressait particulièrement puisqu&amp;rsquo;elle concerne les test d&amp;rsquo;applications réalisées en Gwt.&lt;/p&gt;

&lt;p&gt;Voici donc la vidéo de la présentation ainsi que les slides et quelques notes que j&amp;rsquo;ai pris en la visionnant.&lt;/p&gt;

&lt;p&gt;&lt;object classid=&#34;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&#34; width=&#34;480&#34; height=&#34;385&#34; codebase=&#34;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&#34;&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34; /&gt;&lt;param name=&#34;allowscriptaccess&#34; value=&#34;always&#34; /&gt;&lt;param name=&#34;src&#34; value=&#34;http://www.youtube.com/v/TFfEjo3oFfM&amp;amp;hl=fr_FR&amp;amp;fs=1&amp;amp;&#34; /&gt;&lt;param name=&#34;allowfullscreen&#34; value=&#34;true&#34; /&gt;&lt;embed type=&#34;application/x-shockwave-flash&#34; width=&#34;480&#34; height=&#34;385&#34; src=&#34;http://www.youtube.com/v/TFfEjo3oFfM&amp;amp;hl=fr_FR&amp;amp;fs=1&amp;amp;&#34; allowscriptaccess=&#34;always&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;

&lt;h2 id=&#34;comment-tester-les-applications-gwt-slide-8&#34;&gt;Comment tester les applications Gwt ? (slide 8 )&lt;/h2&gt;

&lt;h3 id=&#34;avec-selenium&#34;&gt;Avec selenium :&lt;/h3&gt;

&lt;p&gt;Selenium va simuler au plus près l&amp;rsquo;interaction qu&amp;rsquo;a un vrai utilisateur avec le navigateur puisqu&amp;rsquo;il démarre un vrai navigateur et réalise directement les opérations de test sur celui-ci. Cependant cette approche est très coûteuse en temps d&amp;rsquo;exécution et surtout plus difficile pour maintenir les tests et plus dure à débugguer.&lt;/p&gt;

&lt;h3 id=&#34;avec-gwttestcase&#34;&gt;Avec GwtTestCase :&lt;/h3&gt;

&lt;p&gt;Cet outil, fourni avec Gwt ,démarre lui aussi un navigateur embarqué pour exécuter les tests. Cependant ici, on parle de &amp;ldquo;crossCompilation&amp;rdquo; puisque le code java est compilée en JS à la volée pour être exécuté par le navigateur embarqué. De la même façon que le development mode. Cet outil est plus rapide que selenium et plus facile à maintenir puisque les tests sont écrits en Java et lancés de la même façons que des tests Junit. Cependant, le fait que le code final testé est du javascript (après compilation à la volée donc) rend plus difficile le débuggage.&lt;/p&gt;

&lt;h3 id=&#34;avec-junit&#34;&gt;Avec Junit :&lt;/h3&gt;

&lt;p&gt;Ici on utilise classiquement Junit pour simuler les interactions utilisateurs. C&amp;rsquo;est le plus facile à maintenir et débugguer, puisque le mieux maîtriser et outillé. Cependant c&amp;rsquo;est aussi évidemment le moins réaliste puisqu&amp;rsquo;aucun navigateur n&amp;rsquo;est démarré pour tester le comportement réel du code compilé.&lt;/p&gt;

&lt;h2 id=&#34;les-problèmes-rencontrés-pendant-les-tests&#34;&gt;Les problèmes rencontrés pendant les tests&lt;/h2&gt;

&lt;h3 id=&#34;problème-1-tester-les-appels-asynchrones-slides-9-à-13&#34;&gt;Problème 1 : tester les appels asynchrones (slides 9 à 13) :&lt;/h3&gt;

&lt;p&gt;Les appels aysnchrones sont la nature même des applications Ajax. C&amp;rsquo;est le A de Ajax ! Avec ces appels, il n&amp;rsquo;y a aucune garantie sur le temps nécessaire pour qu&amp;rsquo;ils réussissent, ni même d&amp;rsquo;ailleurs s&amp;rsquo;ils réussiront un jour (les pauvres :s). Ce sont ces mêmes appels que vous utilisez avec le mécanisme RPC de Gwt :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;myservice.call(new AsyncCallBack() {
    public void onSuccess(QueryResponse response) {
        searchButton.setEnabled(true);

        if(response.count() == 0 {
            resultPanel.add(new Label(&amp;quot;no team found&amp;quot;);
        } else {
            //ajouter la réponse dans un panel, etc
        }
    }

    public void onFailure(Throwable ex) {
        //traiter l&#39;échec de l&#39;appel asynchrone
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MyService myService = mock(MyService.class);
QueryHandler client = new QueryHandler(mySerice);
client.performQuery(&amp;quot;test query&amp;quot;);
ArgumentCaptor&amp;amp;lt;Asyncallback&amp;amp;gt; captor = ArgumentCaptor.forClass(AsynCallback.class);
verify(myService).call(&amp;quot;test query&amp;quot;, captor.capture);
AsyncCallback&amp;amp;lt;QueryResponse&amp;amp;gt; callback = captor.getValue;

//Réel appel à onSuccess

QueryResponse fakeResponse = createFakeResponseForTesting();
callback.onSuccess(fakeResponse);

//Tester les résultats.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ce que l&amp;rsquo;on veut tester ici, c&amp;rsquo;est le résultat d&amp;rsquo;un appel à la méthode onSuccess avec le résultat d&amp;rsquo;une réponse de callBack.&lt;/p&gt;

&lt;p&gt;Ce qu&amp;rsquo;il faut bien voir c&amp;rsquo;est que toute la première partie du test ( mocker le service, mocker le callback, récupérer le callback de réponse), tout ça n&amp;rsquo;est fait que pour pouvoir appeler la méthode onSuccess du callBack ! ça fait donc beaucoup de plomberie pour tester une simple méthode !&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;astuce consiste à toujours remplacer le traitement qu&amp;rsquo;on ferait dans la méthode onSuccess par un appel à une autre méthode : doTraiterReponse(response);&lt;/p&gt;

&lt;p&gt;Cette méthode, fera tout le travail de traitement nécessaire. Ainsi il est plus simple de la tester :&lt;/p&gt;

&lt;p&gt;QueryHandler.java :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;myservice.call(new AsyncCallBack() {
    public void  onSuccess(QueryResponse response) {
        doTraiterReponse(response);
    }

    public  void onFailure(Throwable ex) {
        //traiter l&#39;échec de l&#39;appel  asynchrone
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;QueryHandler client = new QueryHandler(null) // Plus besoin de service !

QueryResponse fakeResponse = createFakeResponseForTesting();
client.doTraiterReponse(fakeresponse);

//Tester les résultats
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;problème-2-opérations-directe-sur-le-dom-slides-14-à-16&#34;&gt;Problème 2 : Opérations directe sur le DOM (slides 14 à 16)&lt;/h3&gt;

&lt;p&gt;Gwt permet de manipuler directement le DOM du document HTML :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String selectedLanguage = DOM.getElementByID(&amp;quot;languageSelection&amp;quot;).getPropertyString(&amp;quot;value&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ici, la solution est simple :APPRENDRE L&amp;rsquo;API !&lt;/p&gt;

&lt;p&gt;En utilisant uniquement les widgets gwt qui encapsule tout la manipulation du DOM, il est plus facile de tester unitairement ces Widgets.&lt;/p&gt;

&lt;p&gt;Ici on aurait utilisé une ListBox dans une panel.&lt;/p&gt;

&lt;h3 id=&#34;problème-3-mixer-java-et-javascript-slides-17-à-19&#34;&gt;Problème 3 : mixer Java et Javascript (slides 17 à 19)&lt;/h3&gt;

&lt;p&gt;Gwt propose un mécanisme pour encapsuler du code javascript dans des méthodes Java :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private native void showPlayer /*{
    $wnd.showPlayer;
}*/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ici, le mélange javascript/java ne permet de tester unitairement avec Junit les méthodes natives.&lt;/p&gt;

&lt;p&gt;La solution la plus simple reste d&amp;rsquo;isoler ces méthodes dans des classes dédiées et de les mocker quand elles sont utilisées.&lt;/p&gt;

&lt;p&gt;Pour tester ces méthodes, il faudra faire appels à GwtTestCase qui lui aura la capacité d&amp;rsquo;exécuter du code mixant java (compilée à la volée en javascript) et appels natifs au code javascript.&lt;/p&gt;

&lt;h3 id=&#34;problème-4-static-global-access-slides-20-à-27&#34;&gt;Problème 4 : static/global access (slides 20 à 27)&lt;/h3&gt;

&lt;p&gt;Les accès statics ou aux variables globales sont difficiles à suivre, et donc à débugguer.&lt;/p&gt;

&lt;p&gt;Pour isoler les dépendances de la classe à tester, on mettra en oeuvre l&amp;rsquo;injection de dépendance pour mocker les classes utilisées dans les tests.&lt;/p&gt;

&lt;p&gt;Pour rappel, il existe un framework d&amp;rsquo;injection de dépendances développé par Google pour Gwt : &lt;a href=&#34;http://code.google.com/p/google-gin/&#34;&gt;Gin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Il est basé sur Guice, le framework d&amp;rsquo;injection de Google.&lt;/p&gt;

&lt;h3 id=&#34;problème-5-séparation-des-responsabilités-slides-28-à-32&#34;&gt;Problème 5 : Séparation des responsabilités (slides 28 à 32)&lt;/h3&gt;

&lt;p&gt;Ici le pattern MVP (Model View Presenter) est mis en avant par rapport au classique MVC.&lt;/p&gt;

&lt;p&gt;Dans MVC, la vue est écouteur du modèle. Le contrôleur modifie le modèle et la vue écoute ces changements. La vue se met à jour en écoutant tout changement du modèle.&lt;/p&gt;

&lt;p&gt;Cette mise à jour entraine forcément qu&amp;rsquo;une partie de la logique du traitement du modèle se retrouve dans la vue, et donc une mauvaise séparation des responsabilité.&lt;/p&gt;

&lt;p&gt;Pour parer à cela, le pattern MVP à été introduit. L&amp;rsquo;article fondateur du pattern MVP est celui de &lt;a href=&#34;http://martinfowler.com/eaaDev/ModelViewPresenter.html&#34;&gt;M. Fowler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dans MVP, toute la logique est concentrée dans le Presenter. Le Modèle et la Vue informe le Presenter des changements par un système d&amp;rsquo;évènements. Le Presenter réagit aux évènements et reflète les changements sur le modèle et la vue. Le plus souvent la vue sera d&amp;rsquo;ailleurs une vue passive.&lt;/p&gt;

&lt;p&gt;Le slide 32 est particulièrement intéressant, puisque c&amp;rsquo;est lui qui ma donné le déclic pour comprendre toute la logique de MVP.&lt;/p&gt;

&lt;p&gt;Avec un Presenter isolé de cette façons, il est facile de le tester unitairement (en pseudo code &amp;ldquo;java&amp;rdquo; pour plus de clarté) :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Presenter {
    Vue vue;
    Model model;

    public Presenter(Vue vue, Model model) {
        this.model = model;
        this.vue = vue;
        attachHandler();
    }

    private void attachHandler() {
        vue.getButton.addClickHandler(new ClickHandler() {
            public void onClick(Event e) {
                model.save(vue.getData());
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//With
Model mockModel = mock(Model.class);
Vue mockVue = mock(Vue.class);
Presenter presenter = new Presenter(mockVue, mockModel);

//Given
Data testData = createFakeData();
vue.setData(testData);

// Assert
verify(mockModel).save(testData);
vue.getButton.click();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Voilà pour les quelques notes sur cette conférence, il y&amp;rsquo;en a encore beaucoup d&amp;rsquo;autres à regarder qui ne porte pas que sur  GWT mais sur les Test et les bonnes pratiques en général.&lt;/p&gt;

&lt;p&gt;Bon visionnage et surtout bon TDD à tous !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Critique du Livre &#39;Programmation GWT 2&#39;</title>
      <link>http://raphaelbrugier.github.io/blog/critique-du-livre-programmation-gwt-2/</link>
      <pubDate>Thu, 28 Jan 2010 23:04:00 +0000</pubDate>
      
      <guid>http://raphaelbrugier.github.io/blog/critique-du-livre-programmation-gwt-2/</guid>
      <description>&lt;p&gt;Je viens de terminer la lecture de &amp;ldquo;Programmation GWT 2&amp;rdquo; de Sami Jabber. Sorti quelques jours après la release finale de cette nouvelle version majeure du framework, il constitue un excellent point d&amp;rsquo;entrée à cette technologie autant qu&amp;rsquo;un approfondissement pour les connaisseurs.&lt;/p&gt;

&lt;p&gt;Bien que je connaisse déjà (un peu) GWT et que j&amp;rsquo;expérimente la version 2 depuis quelques mois, j&amp;rsquo;ai appris énormément avec ce livre. Et surtout j&amp;rsquo;ai pris beaucoup de plaisir à le lire! Les premiers chapitres constituent de bon rappel sur le fonctionnement général.&lt;/p&gt;

&lt;p&gt;Le chapitre sur RPC est assez surprenant puisque l&amp;rsquo;auteur invite à utiliser la version 2 de ce service, &lt;a href=&#34;http://code.google.com/intl/fr/webtoolkit/doc/latest/DevGuideServerCommunication.html#DevGuideDeRPC&#34;&gt;DeRPC (Direct-Eval RPC)&lt;/a&gt; &amp;hellip; alors qu&amp;rsquo;il n&amp;rsquo;a pas été publiés en version finale et que toutes les classes sont marqués &amp;ldquo;WARNING EXPERIMENTAL DO NOT USE !&amp;rdquo;. Personnellement je ne tenterais pas pour une production pro, mais c&amp;rsquo;est toujours intéressant de testé. Dans les tout cas, l&amp;rsquo;auteur propose &lt;a href=&#34;http://www.programmationgwt2.com/web/guest/chapitres/-/wiki/Main/Chapitre+7+-+Les+services+RPC&#34;&gt;une justification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Le chapitre sur J2EE propose un pattern vraiment très intéressant pour simplifier l&amp;rsquo;appel de services existant (spring, ejb) en évitant d&amp;rsquo;avoir à écrire des classes asynchrones.&lt;/p&gt;

&lt;p&gt;Pour moi, le gros plus de ce livre réside dans le chapitre &amp;ldquo;Sous le capot&amp;rdquo;. Il propose de plonger dans le coeur de GWT et décrit tout la mécanique de compilation JAVA vers JavaScript. C&amp;rsquo;est vraiment passionnant, et là on se rend bien compte de la prouesse technique qu&amp;rsquo;a nécessité la création de ce framework.&lt;/p&gt;

&lt;p&gt;Les derniers chapitres exposent les nouveautés de la version 2 avec plus de pédagogie que les tutoriels du site officiel, un bon point.&lt;/p&gt;

&lt;p&gt;Par contre, le chapitre sur les patterns est trop rapide à mon goût. Avec en plus la fin du chapitre dédié à la sécurité, je suis resté sur ma faim. Mais bon, ce n&amp;rsquo;est pas un livre sur les patterns et le lecteur pourra approfondir les patterns les plus intéressant par expérimentation par lui-même.&lt;/p&gt;

&lt;p&gt;Un avis très positif donc pour ce livre. Le premier livre sur GWT 2 est en français et il est bon !&lt;/p&gt;

&lt;p&gt;Nb : à noter qu&amp;rsquo;un &lt;a href=&#34;http://www.programmationgwt2.com&#34;&gt;WIKI&lt;/a&gt; est disponible pour corriger les coquilles du livre ou discuter avec l&amp;rsquo;auteur.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GWT Sortie de la version 2.0</title>
      <link>http://raphaelbrugier.github.io/blog/gwt-sortie-de-la-version-2-0/</link>
      <pubDate>Thu, 10 Dec 2009 21:51:00 +0000</pubDate>
      
      <guid>http://raphaelbrugier.github.io/blog/gwt-sortie-de-la-version-2-0/</guid>
      <description>

&lt;p&gt;Il y a quelques jours, Google a annoncé la sortie de la version 2 de son framework GWT.&lt;/p&gt;

&lt;p&gt;Cette nouvelle version majeur marque un tournant en apportant de nombreuses fonctionnalités destinées à faciliter la vie du développeur.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;accent à clairement été mis sur la rapidité dans cette nouvelle version, rapidité pour le développement et rapidité pour l&amp;rsquo;utilisateur final&lt;/p&gt;

&lt;h3 id=&#34;ui-binder&#34;&gt;UI Binder&lt;/h3&gt;

&lt;p&gt;L&amp;rsquo;UI Binder tout d&amp;rsquo;abord est une nouvelle façon de décrire les interfaces GWT de façons déclarative avec une syntaxe XML. L&amp;rsquo;utilisation d&amp;rsquo;UI Binder permet de séparer clairement l&amp;rsquo;interface de la logique l&amp;rsquo;application. Par la suite il sera donc facile de modifier l&amp;rsquo;interface de l&amp;rsquo;application. UI Binder à été complètement intégré au plugin google pour Eclipse, avec par exemple un wizard de création, la complétion du code, le refactoring, &amp;hellip;&lt;/p&gt;

&lt;p&gt;Un petit exemple pour comparer une interface écrite &amp;ldquo;à la&amp;rdquo; swing et avec UI Binder :&lt;/p&gt;

&lt;p&gt;En java :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final Label label = new Label(&amp;quot;Enter your name&amp;quot;);
final Button sendButton = new Button(&amp;quot;Send&amp;quot;);
HorizontalPanel hPanel = new HorizontalPanel();
hPanel.add(label);
VerticalPanel vPanel = new VerticalPanel();
vPanel.add(hPanel);
vPanel.add(button);&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Avec Ui binder :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;g:verticalpanel&amp;gt;
	&amp;lt;g:horizontalpanel&amp;gt;
		&amp;lt;g:label&amp;gt;Enter your name&amp;lt;/g:label&amp;gt;
	&amp;lt;/g:horizontalpanel&amp;gt;
	&amp;lt;g:button text=&amp;quot;Send&amp;quot; stylename=&amp;quot;{style.pretty}&amp;quot; ui:field=&amp;quot;button&amp;quot; /&amp;gt;
&amp;lt;/g:verticalpanel&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;development-mode&#34;&gt;Development mode&lt;/h3&gt;

&lt;p&gt;Sûrement la fonctionnalité qui va faire gagner le plus de temps aux développeurs. Exit le hosted mode, bonjour le development mode ! :)
Désormais, un simple plugin installé dans le browser remplace le navigateur de test qui était fournit. Le principe est toujours le même, une simple sauvegarde du fichier modifié et un refresh dans le navigateur permettent de voir les changements. Inutile de compiler en javascript pendant de longues minutes, le byte code java est utilisé à la place. Ceci permet donc par ailleurs de pouvoir tester en même temps le rendu dans plusieurs navigateurs.&lt;/p&gt;

&lt;h3 id=&#34;amélioration-du-code-compilé&#34;&gt;Amélioration du code compilé.&lt;/h3&gt;

&lt;p&gt;Comme à chaque nouvelle version, la qualité du code javascript produit par le compilateur est encore optimisée. Le simple fait donc de recompiler un projet avec cette nouvelle version devrait donc sensiblement améliorer les performances de votre applications web.&lt;/p&gt;

&lt;h3 id=&#34;code-splitting&#34;&gt;Code Splitting&lt;/h3&gt;

&lt;p&gt;Le code splitting part d&amp;rsquo;un constat simple : pourquoi télécharger la totalité du code javascript de l&amp;rsquo;application quand on pourrait télécharger à la demande à la manière du streaming ? Les ingénieurs GWT ont donc ajouté cette fonctionnalité et le premier bénéficiaire en est Wave qui a vu son temps de téléchargement initial considérablement diminué.
Le principe : différer le téléchargement des blocs indépendants de l&amp;rsquo;application. Quelques lignes de codes suffisent pour cela :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GWT.runAsync(new RunAsyncCallback() {
	public void onFailure(Throwable caught) {
		Window.alert(&amp;quot;Code download failed&amp;quot;);
	}             

	public void onSuccess() {
             Window.alert(&amp;quot;Hello, AJAX&amp;quot;);           
	}         
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;speed-tracer&#34;&gt;Speed Tracer&lt;/h3&gt;

&lt;p&gt;Un outil de profiling a été annoncé en même temps que cette nouvelle version de GWT. Speed tracer est en fait une extension pour Google Chrome qui permet de profiler les requêtes, les temps de parsing et les temps de rendus du navigateur. Speed tracer identifie automatiquement les problèmes de performances de votre application.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://raphaelbrugier.github.io/posts/speedTracer.png&#34;&gt;&lt;img src=&#34;http://raphaelbrugier.github.io/posts/speedTracer.png&#34; alt=&#34;speedTracer.png&#34; title=&#34;speedTracer.png, déc. 2009&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Avec cette nouvelle version de GWT, Google continue la guerre des RIA. L&amp;rsquo;ensemble des fonctionnalités permettra de diminuer le temps de développement et d&amp;rsquo;améliorer l&amp;rsquo;expérience utilisateur.&lt;/p&gt;

&lt;p&gt;Et bien sur, tout cela repose toujours sur les standards HTML 5 + CSS + Ajax donc inutile d&amp;rsquo;installer un plugin propriétaire dans le navigateur comme le demandent flash et silverlight.&lt;/p&gt;

&lt;p&gt;Le premier livre sur  GWT 2 devrait sortir très prochainement et la bonne nouvelle c&amp;rsquo;est qu&amp;rsquo;il est en français !&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est écrit par &lt;a href=&#34;http://www.dng-consulting.com/blogs/&#34;&gt;Sami Jabber&lt;/a&gt; et vous pouvez déjà &lt;a href=&#34;http://www.eyrolles.com/Accueil/Livre/programmation-gwt-2-9782212125696&#34;&gt;lire le sommaire et un chapitre entier&lt;/a&gt; ou &lt;a href=&#34;http://www.amazon.fr/Programmation-Concevoir-D%C3%A9velopper-Applications-Toolkit/dp/2212125690/ref=pd_sxp_grid_pt_0_0&#34;&gt;le commander ici&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;sources&#34;&gt;Sources :&lt;/h4&gt;

&lt;p&gt;Google camp fire on GWT and Speed Tracer : &lt;a href=&#34;http://www.youtube.com/watch?v=D2ibM4oufdM&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;http://www.youtube.com/watch?v=JQpuDB2Jxfg&amp;amp;amp;feature=channel&#34;&gt;part 2&lt;/a&gt;, &lt;a href=&#34;http://www.youtube.com/watch?v=QrnbKZ3hxls&amp;amp;amp;feature=channel&#34;&gt;part 3&lt;/a&gt;, &lt;a href=&#34;http://www.youtube.com/watch?v=WM6KPW8ZyjU&amp;amp;amp;feature=channel&#34;&gt;part 4&lt;/a&gt;, &lt;a href=&#34;http://www.youtube.com/watch?v=mnSNVfxK19Y&amp;amp;amp;feature=channel&#34;&gt;part 5&lt;/a&gt;, &lt;a href=&#34;http://www.youtube.com/watch?v=Kfh6IX-yhsc&amp;amp;amp;feature=channel&#34;&gt;part 6&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google IO mai 2009 : Best Practices For Architecting Your GWT App</title>
      <link>http://raphaelbrugier.github.io/blog/google-io-mai-2009-best-practices-for-architecting-your-gwt-app/</link>
      <pubDate>Sun, 06 Sep 2009 14:34:00 +0000</pubDate>
      
      <guid>http://raphaelbrugier.github.io/blog/google-io-mai-2009-best-practices-for-architecting-your-gwt-app/</guid>
      <description>

&lt;p&gt;Lors de la conférence annuelle de Google, en mai dernier, Ray Ryan à fait une présentation très intéressante sur les meilleures pratiques pour concevoir une application avec GWT. Cette présentation, a eu beaucoup d&amp;rsquo;écho dans la communauté GWT et plusieurs frameworks sont apparus pour faciliter l&amp;rsquo;implémentation de ces &amp;ldquo;bonne pratiques&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;object width=&#34;425&#34; height=&#34;344&#34;&gt;&lt;param name=&#34;movie&#34; value=&#34;http://www.youtube.com/v/PDuhR18-EdM&amp;hl=fr&amp;fs=1&amp;&#34; /&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34; /&gt;&lt;param name=&#34;allowscriptaccess&#34; value=&#34;always&#34; /&gt;&lt;embed src=&#34;http://www.youtube.com/v/PDuhR18-EdM&amp;hl=fr&amp;fs=1&amp;&#34; type=&#34;application/x-shockwave-flash&#34; allowscriptaccess=&#34;always&#34; allowfullscreen=&#34;true&#34; width=&#34;425&#34; height=&#34;344&#34;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;

&lt;p&gt;Voici un résumé sous forme de note de quelques points importants abordés dans cette présentation.&lt;/p&gt;

&lt;h4 id=&#34;ajax&#34;&gt;AJAX&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Il faut minimiser la taille des objets retournés au client. Par exemple en ayant une liste d&amp;rsquo;identifiants d&amp;rsquo;objets en attribut plutôt qu&amp;rsquo;une liste d&amp;rsquo;objets.&lt;/li&gt;
&lt;li&gt;Il faut spécifier le type d&amp;rsquo;une liste lorsque cela est possible:
&lt;code&gt;ArrayList&amp;lt;Object&amp;gt; maListe;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;plutôt que&lt;/p&gt;

&lt;p&gt;&lt;code&gt;List&amp;lt;Object&amp;gt; maListe;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;En effet, le compilateur GWT produira moins de code javascript s&amp;rsquo;il connaît plus précisément le type de liste.&lt;/p&gt;

&lt;h4 id=&#34;command-pattern&#34;&gt;Command Pattern&lt;/h4&gt;

&lt;p&gt;Le &amp;ldquo;Command Pattern&amp;rdquo; est un &lt;a href=&#34;http://dico.developpez.com/html/3161-Conception-Command-design-pattern-command.php&#34;&gt;pattern classique des IHM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Appliqué à GWT il permet de&amp;nbsp;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mettre en place plus facilement une solution de cache. Avant d&amp;rsquo;appeler un service, la commande execute vérifiera qu&amp;rsquo;elle n&amp;rsquo;a pas déjà la donnée.&lt;/li&gt;
&lt;li&gt;Mettre en place plus facilement des traitements par lots (batch).&lt;/li&gt;
&lt;li&gt;Centraliser les messages d&amp;rsquo;erreurs. Les onFailure() des réponses asynchrones pourront directement être implémenté dans la classe command.&lt;/li&gt;
&lt;li&gt;Découper le code javascript avec la méthode runAsync() de gwt 2.0  Les classes command qui encapsulent les services pourront être chargé par l&amp;rsquo;application que lorsque c&amp;rsquo;est nécessaire.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les exemples de code présentés:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/** Le nom Command est déjà utilisé dans GWT et est donc remplacé par Action */
interface Action&amp;lt;t extends response&amp;gt; { }

        interface Response { }

        interface ContactsService extends RemoteService {
        &amp;lt;t extends response&amp;gt; T execute(Action&amp;lt;t&amp;gt; action);
            }

            interface ContactsServiceAsync {
            void execute(Action&amp;lt;t&amp;gt; action, AsyncCallback&amp;lt;t&amp;gt; callback);
                }

                class GetDetails implements Action&amp;lt;getdetailsresponse&amp;gt; {
                    private final ArrayList&amp;lt;contactdetailid&amp;gt; ids;

                        public GetDetails(ArrayList&amp;lt;contactdetailid&amp;gt; ids) {
                            this.ids = ids;
                            }

                            public ArrayList&amp;lt;contactdetailid&amp;gt; getIds() {
                                return ids;
                                }
                                }

                                class GetDetailsResponse implements Response {
                                private final ArrayList&amp;lt;contactdetail&amp;gt; details;
                                    public GetDetailsResponse(ArrayList&amp;lt;contactdetail&amp;gt; details) {
                                        this.details = details;
                                        }
                                        public ArrayList&amp;lt;contactdetail&amp;gt; getDetails() {
                                            return new ArrayList&amp;lt;contactdetail&amp;gt;(details);
                                                }
                                                }

                                                abstract class GotDetails implements
                                                AsyncCallback&amp;lt;getdetailsresponse&amp;gt; {
                                                    public void onFailure(Throwable oops) {
                                                    /* default appwide failure handling */
                                                    }
                                                    public void onSuccess(GetDetailsResponse result) {
                                                    got(result.getDetails());
                                                    }
                                                    public abstract void got(ArrayList&amp;lt;contactdetail&amp;gt; details);
                                                        }

                                                        void showContact(final Contact contact) {
                                                        service.execute(new GetDetails(contact.getDetailIds()),
                                                        new GotDetails() {
                                                        public void got(ArrayList&amp;lt;contactdetail&amp;gt; details) {
                                                            renderContact(contact);
                                                            renderDetails(details);
                                                            }
                                                            });
                                                            }&amp;lt;/contactdetail&amp;gt;&amp;lt;/contactdetail&amp;gt;&amp;lt;/getdetailsresponse&amp;gt;&amp;lt;/contactdetail&amp;gt;&amp;lt;/contactdetail&amp;gt;&amp;lt;/contactdetail&amp;gt;&amp;lt;/contactdetail&amp;gt;&amp;lt;/contactdetailid&amp;gt;&amp;lt;/contactdetailid&amp;gt;&amp;lt;/contactdetailid&amp;gt;&amp;lt;/getdetailsresponse&amp;gt;&amp;lt;/t&amp;gt;&amp;lt;/t&amp;gt;&amp;lt;/t&amp;gt;&amp;lt;/t&amp;gt;&amp;lt;/t&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une librairie proposant une implémentation du command-pattern est disponible : &lt;a href=&#34;http://code.google.com/p/gwt-dispatch/&#34;&gt;gwt-dispatch&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;event-bus&#34;&gt;Event bus&lt;/h4&gt;

&lt;p&gt;Plutôt que d&amp;rsquo;enregistrer les composants graphiques entre eux et d&amp;rsquo;utiliser le classique &lt;em&gt;MVC&lt;/em&gt;, Ray recommande d&amp;rsquo;utiliser un &amp;ldquo;Event bus&amp;rdquo;. Chaque composant s&amp;rsquo;enregistre sur le bus (en fait un handlerManager) et reste à l&amp;rsquo;écoute d&amp;rsquo;événements.&lt;/p&gt;

&lt;h3 id=&#34;model-view-presenter-mvp&#34;&gt;Model-View-Presenter (MVP)&lt;/h3&gt;

&lt;p&gt;Le &amp;ldquo;&lt;a href=&#34;http://martinfowler.com/eaaDev/SupervisingPresenter.html&#34;&gt;Model-View-Presenter&lt;/a&gt;&amp;rdquo; pattern vient en remplacement du classique &lt;em&gt;MVC&lt;/em&gt; dans les applications GWT.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;utilisation de ce pattern facilite les Test Unitaires, seul la partie &amp;ldquo;Presenter&amp;rdquo; a besoin d&amp;rsquo;être testée. Les changements dans la partie &amp;ldquo;View&amp;rdquo; sont entièrement géré par la partie &amp;ldquo;Presenter&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Une librairie proposant une implémentation du MVP et de l&amp;rsquo;event-bus est disponible : &lt;a href=&#34;http://code.google.com/p/gwt-presenter/&#34;&gt;gwt-presenter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;injection-de-dépendance&#34;&gt;Injection de dépendance&lt;/h4&gt;

&lt;p&gt;L&amp;rsquo;injection de dépendance est réalisé du coté client avec le framework GIN et du coté serveur avec le framework GUICE. Je ne pense pas que ce soit nécessaire de rappeler les bénéfices de l&amp;rsquo;injection, Spring est là pour ça ;)&lt;/p&gt;

&lt;h4 id=&#34;test-unitaires&#34;&gt;Test unitaires&lt;/h4&gt;

&lt;p&gt;La partie &amp;ldquo;Presenter&amp;rdquo; du pattern MVP est facilement testable grace à l&amp;rsquo;utilisation de mock pour simuler la partie &amp;ldquo;View&amp;rdquo;. EasyMock ou d&amp;rsquo;autres frameworks simplifie la création de mock et des test unitaires.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
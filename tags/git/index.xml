<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raphael Brugier</title>
    <link>http://www.raphael-brugier.com/tags/git/index.xml</link>
    <description>Recent content on Raphael Brugier</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://www.raphael-brugier.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Add a Git hook to automatically verify a repository&#39;s email</title>
      <link>http://www.raphael-brugier.com/blog/git-verify-email-hook/</link>
      <pubDate>Sat, 03 Dec 2016 13:40:15 -0500</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/git-verify-email-hook/</guid>
      <description>&lt;p&gt;I use Git a lot and I often have to switch between my personal repositories (ie: Github) and my professional (Ippon) repositories on the same laptop.
My default Git email is configured to my personal email and I have often forgotten to configure it to my professional email when creating/cloning a repository for my company.
Like everything in Git, this can be automated to avoid mistakes.&lt;/p&gt;

&lt;p&gt;In this post, I will show how I use a Git hook to check the email configured in any repository before every commit.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;email-configuration-per-repositories&#34;&gt;Email configuration per repositories:&lt;/h1&gt;

&lt;p&gt;When you first installed Git you probably have set your username and email globally with these commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git config --global user.name &amp;quot;Raphael Brugier&amp;quot;
$ git config --global user.email &amp;quot;raphael.b_____r@gmail.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can override this values per repository:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd some-ippon-project
$ git config user.email &amp;quot;rbrugier@ipponusa.com&amp;quot;
## print the configuration
$ git config user.email
&amp;gt; rbrugier@ipponusa.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;git-hooks&#34;&gt;Git hooks&lt;/h1&gt;

&lt;p&gt;Git hooks are scripts that Git executes before or after Git commands.
For example: commit, push, rebase, &amp;hellip;&lt;/p&gt;

&lt;p&gt;They are located in every Git repository in the .git/hooks/ folder.
By default, Git creates hooks suffixed with &amp;ldquo;.sample&amp;rdquo;
To create a custom hook, create a new file without the suffix for the hook you want to create  and add the Bash code for your needs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim .git/hooks/pre-commit
## add the hook code as any bash script
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;global-git-hooks&#34;&gt;Global Git hooks&lt;/h1&gt;

&lt;p&gt;Since Git 2.9, Git offers an option to share the hooks globally between the repositories. I prefer this option to duplicating hooks in every repository, even if you could use templates to automatically copy them in every new repository.&lt;/p&gt;

&lt;p&gt;Create a hooks folder, for example in your dotfiles, and configure Git globally to use this folder as the hooks folder for every repository:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p ~/dotfiles/_git/hooks/
$ git config --global core.hooksPath ~/dotfiles/_git/hooks/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git has added the option in your global Git config:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat ~/.gitconfig
...
[user]
    name = Raphael Brugier
    email = raphael.b_____r@gmail.com
[core]
    hooksPath = ~/dotfiles/_git/templates/hooks/
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;check-email-hook&#34;&gt;Check email hook&lt;/h1&gt;

&lt;p&gt;The goal is now to use a hook to validate the email set in the repository before committing.&lt;/p&gt;

&lt;p&gt;I follow a simple convention to differentiate my personal and professional repositories.
My professional repositories are located on &lt;code&gt;~/devs/ippon&lt;/code&gt; and my personal on &lt;code&gt;~/devs/github/&lt;/code&gt; or &lt;code&gt;~/devs/projects/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Write a bash script to check the email configured based on the repository&amp;rsquo;s path as a pre-commit hook :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim ~/dotfiles/_git/hooks/pre-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
PWD=`pwd`
if [[ $PWD == *&amp;quot;ippon&amp;quot;* ]] # 1)
then
  EMAIL=$(git config user.email)
  if [[ $EMAIL == *&amp;quot;ippon&amp;quot;* ]] # 2)
  then
    echo &amp;quot;&amp;quot;;
  else
    echo &amp;quot;email not configured to Ippon in Ippon directory&amp;quot;;
    echo &amp;quot;run:&amp;quot;
    echo &#39;   git config user.email &amp;quot;rbrugier@ipponusa.com&amp;quot;&#39;
    echo &#39;&#39;
    exit 1; # 3)
  fi;
fi;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;check if the current path contains &amp;ldquo;ippon&amp;rdquo;&lt;/li&gt;
&lt;li&gt;check if the configured email also contains &amp;ldquo;ippon&amp;rdquo;&lt;/li&gt;
&lt;li&gt;if not, exit the script with an error. This will cancel the commit.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;result&#34;&gt;Result&lt;/h1&gt;

&lt;p&gt;Test the hook in a new repository:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p ~/devs/ippon/testhook/
$ cd ~/devs/ippon/testhook
$ git init
$ git commit -m &amp;quot;test&amp;quot;
&amp;gt; email not configured to Ippon in Ippon directory
&amp;gt; run:
&amp;gt;   git config user.email &amp;quot;rbrugier@ipponusa.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Git hooks are powerful to automate tests and avoid mistakes. Other common usages of hooks are to trigger tests before a commit or a deployment after a push.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My development environment</title>
      <link>http://www.raphael-brugier.com/blog/my-development-environment/</link>
      <pubDate>Sun, 27 Nov 2016 18:02:03 -0500</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/my-development-environment/</guid>
      <description>&lt;p&gt;A customized development environment could be a huge productivity boost in the day to day work.
In this post, I will share the tools and configurations I currently use.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;terminal-iterm-2&#34;&gt;Terminal: iTerm 2&lt;/h1&gt;

&lt;p&gt;I use &lt;a href=&#34;https://iterm2.com/documentation-shell-integration.html&#34;&gt;iTerm 2&lt;/a&gt; 2 instead of the default terminal on mac.
On linux, I used terminator.&lt;/p&gt;

&lt;p&gt;iTerm 2 adds several features, the most important for me is the ability to have multiple panes and tabs.&lt;/p&gt;

&lt;h1 id=&#34;shell-zsh&#34;&gt;Shell: Zsh&lt;/h1&gt;

&lt;p&gt;Zsh is a shell very similar to bash, but it adds a lot of cooler features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a programmable autocompletion. You can navigate with the arrows keys the completion for example when browsing a directory&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a super history substring search&lt;/p&gt;

&lt;p&gt;brew install zsh&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;oh-my-zsh-and-zgen-to-customize-zsh&#34;&gt;oh-my-zsh and Zgen to customize Zsh&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;Oh-my-zsh&lt;/a&gt; is probably the most well known set of plugins to enhance Zsh.
It&amp;rsquo;s a super git repository of plugins, which you can enable to add aliases and parameters completion to your favorites tools.
I have used it for 3 years and have now switched to &lt;a href=&#34;https://github.com/tarjoilija/zgen&#34;&gt;Zgen&lt;/a&gt; to manage my plugins.
Zgen loads the plugins faster than oh-my-zsh and more importantly can load plugins from various github repositories.&lt;/p&gt;

&lt;p&gt;Here is my current list of plugins:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  #from zsh
  zgen oh-my-zsh
  zgen oh-my-zsh plugins/autojump
  zgen oh-my-zsh plugins/colored-man-pages
  zgen oh-my-zsh plugins/docker
  zgen oh-my-zsh plugins/docker-compose
  zgen oh-my-zsh plugins/git
  zgen oh-my-zsh plugins/golang
  zgen oh-my-zsh plugins/sudo

  #theme
  zgen load bhilburn/powerlevel9k powerlevel9k

  #extra plugins
  zgen load djui/alias-tips
  zgen load zsh-users/zsh-syntax-highlighting
  zgen load zsh-users/zsh-history-substring-search
  zgen load zsh-users/zsh-autosuggestions
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;autojump&#34;&gt;autojump&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/wting/autojump&#34;&gt;autojump&lt;/a&gt; is a faster way to navigate the directories, to jump to a directory that contains &amp;ldquo;Foo&amp;rdquo; in its name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  j foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install it with homebrew and then just add the corresponding oh-my-zsh plugin to load it in your $PATH:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install autojump
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;djui-alias-tips&#34;&gt;djui/alias-tips&lt;/h2&gt;

&lt;p&gt;This Zsh plugin will suggest the corresponding shorter alias after you type a command. Very useful when used in combination with one of the the oh-my-zsh plugins which could add a lot of aliases.&lt;/p&gt;

&lt;h1 id=&#34;dotfiles&#34;&gt;dotfiles&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve started versioning my &amp;ldquo;dotfiles&amp;rdquo; configuration a few years ago.
For this I use a git repository in my home: ~/dotfiles
The repository structure follows the hierarchy to install in my home directory.
For each file, a symbolic link is created in my home directory to point to the real file in my dotfile repository.&lt;/p&gt;

&lt;p&gt;The install script replace the &amp;ldquo;_&amp;rdquo; character with a dot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;!/bin/bash

# adapted from https://github.com/skeeto/dotfiles/blob/master/install.sh

## Install each _-prefixed file or dir
find . -regex &amp;quot;./_.*&amp;quot; -type f -print0 | sort -z | while read -d $&#39;\0&#39; file
do
    dotfile=${file/.\/_/.}

    ## Install directory first
    if [ ! -e $(dirname ~/$dotfile) ]; then
    	echo &amp;quot;create directory: &amp;quot;
    	echo $(dirname ~/$dotfile)
        mkdir -p -m 700  $(dirname ~/$dotfile)
    fi

    ## Create a link to the repository version
    echo Installing $dotfile
    ln -fs $(pwd)/$file ~/$dotfile
    chmod go-rwx $file
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;dev-tools&#34;&gt;Dev tools:&lt;/h1&gt;

&lt;p&gt;The other tools I use every day, which would require a post on their own for each&lt;/p&gt;

&lt;h3 id=&#34;intellij&#34;&gt;IntelliJ&lt;/h3&gt;

&lt;p&gt;The best IDE! The refactoring tools are still impressive, and too often unknown.&lt;/p&gt;

&lt;h3 id=&#34;docker&#34;&gt;Docker&lt;/h3&gt;

&lt;p&gt;I use Docker to test technologies, start and throw away tools for my projects, etc&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git commit fixup</title>
      <link>http://www.raphael-brugier.com/blog/git-commit-fixup/</link>
      <pubDate>Wed, 23 Nov 2016 18:37:21 -0500</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/git-commit-fixup/</guid>
      <description>&lt;p&gt;In this article, I will describe a git option to quickly fix a previous commit.
This sometimes happens when I want to fix a typo in a previous commit after few new commits.
The goal is to keep a &amp;ldquo;clean&amp;rdquo; git history with consistent commits adding features to facilitate the code reviews.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;(!) Of course, like any &amp;ldquo;rewriting history&amp;rdquo; command which modifies a previous command, it should be used with caution and never used to modify a commit already push.&lt;/p&gt;

&lt;h2 id=&#34;the-options&#34;&gt;The options&lt;/h2&gt;

&lt;p&gt;The option is &lt;code&gt;--fixup&lt;/code&gt; to create a commit fixing a previous one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit --fixup &amp;lt;commit to fix&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to automatically apply the &lt;code&gt;fixup&lt;/code&gt; commit when rebasing, add &lt;code&gt;--autosquash&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase -i origin/master --autosquash
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example:&lt;/h2&gt;

&lt;p&gt;Starting with the following git history:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$git log --oneline --decorate
d36dc2f code code code
7add401 add README
fb5b59c initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you realize you did a typo in the initial README file you can fix and want to modify the &amp;lsquo;add README&amp;rsquo; commit instead of creating a new commit for a typo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;${fix the typo}
$git add .
$git commit --fixup 7add401
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git has created a commit with a message prefixed with &amp;lsquo;!fixup&amp;rsquo; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$git log --oneline --decorate
7fd8071 (HEAD -&amp;gt; master) fixup! add README
d36dc2f code code code
7add401 add README
fb5b59c initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you can rewrite the git history of the 3 previous commits with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase --interactive --autosquash HEAD~3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$git log --oneline --decorate
3ec6daa (HEAD -&amp;gt; master) code code code
d6c4c24 add README
fb5b59c initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;--autosquash&lt;/code&gt; option has automatically reordered and applied the fixup commit.
Note that this option only works with an interactive rebase.&lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;--autosquash&lt;/code&gt; option only applies to fixup commit, it is safe to  enable it by default in the git config:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global rebase.autosquash true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And voilà! No more almost empty commits to fix typos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://robots.thoughtbot.com/autosquashing-git-commits&#34;&gt;source&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raphael Brugier</title>
    <link>https://www.raphael-brugier.com/tags/jhipster/index.xml</link>
    <description>Recent content on Raphael Brugier</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://www.raphael-brugier.com/tags/jhipster/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Docker to simplify Cassandra development in JHipster</title>
      <link>https://www.raphael-brugier.com/blog/using-docker-to-simplify-cassandra-development-in-jhipster/</link>
      <pubDate>Mon, 27 Jun 2016 20:33:11 -0500</pubDate>
      
      <guid>https://www.raphael-brugier.com/blog/using-docker-to-simplify-cassandra-development-in-jhipster/</guid>
      <description>&lt;p&gt;JHipster is an open source project that generates a fully working application in seconds. With a minimal configuration, JHipster accelerates the start of new projects by integrating frontend, backend, security and a database.&lt;/p&gt;

&lt;p&gt;Cassandra is one of the supported databases and JHipster generates all the configuration needed to access the cluster.&lt;/p&gt;

&lt;p&gt;But it is often hard for the developers to configure and maintain a local Cassandra cluster.&lt;/p&gt;

&lt;p&gt;Moreover, there is no standard tooling to manage the schema migrations, like Liquibase or Flyway for SQL databases, making it difficult to synchronize the schema between every environment and a local configuration.&lt;/p&gt;

&lt;p&gt;JHipster’s goal is to provide the most simple and productive development environment out of the box for the developers, and this tool has been added in the latest (3.4.0) version.&lt;/p&gt;

&lt;p&gt;In this post, I’ll describe the design of the tool and the basic commands to use it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;design&#34;&gt;Design&lt;/h1&gt;

&lt;p&gt;A Docker Compose[1] configuration is generated to start a Cassandra cluster locally with one command. A set of bash scripts automatically save the executed migrations in a dedicated table. This allows you to automatically[2] execute only the new migration scripts when deploying a new version of the application.
The tool can be used both by the developers to synchronize their local cluster and in production to keep track of the schema migrations.&lt;/p&gt;

&lt;p&gt;The standardization of the migration scripts is also used by the integration tests to start an in-memory Cassandra cluster.&lt;/p&gt;

&lt;p&gt;[1]: JHipster uses the v2 of the Docker Compose file format and Docker 1.10+ and Compose 1.6+ are required.&lt;/p&gt;

&lt;p&gt;[2]: Because the migration scripts are read from a Docker volume, the sources must be located in the use directory.&lt;/p&gt;

&lt;h2 id=&#34;basic-commands-to-run-the-migration-tool&#34;&gt;Basic commands to run the migration tool&lt;/h2&gt;

&lt;p&gt;Launch a JHipster application and a Cassandra cluster:&lt;/p&gt;

&lt;p&gt;First you need to build a Docker image containing your application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mvnw package -Pprod docker:build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can run this image and the other services with Docker Compose:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose -f src/main/docker/app.yml up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compose starts 4 Docker containers:&lt;/p&gt;

&lt;p&gt;The application image
- A first Cassandra node acting as the contact point
- A second node joining the cluster
- A service executing the schema migrations
- Thanks to Docker Compose, it is easy to add new nodes in the cluster:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose -f src/main/docker/app.yml scale yourapp-cassandra-node=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new node automatically joins the Cassandra cluster using the first node as a contact point.
The container executing the migrations reads a dedicated folder – &lt;code&gt;config/cql/changelogs/&lt;/code&gt; by convention – to find the migration scripts.&lt;/p&gt;

&lt;p&gt;Like Liquibase, the migration tool stores the metadata of the executed scripts in a table named schema_version to keep track of executed scripts.&lt;/p&gt;

&lt;h2 id=&#34;modifying-the-schema-with-jhipster-and-using-the-migration-tool&#34;&gt;Modifying the schema with JHipster and using the migration tool:&lt;/h2&gt;

&lt;p&gt;With JHipster, it is possible to create a new domain entity in one command with a few questions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yo jhipster:entity book
Generating field #1? Do you want to add a field to your entity? Yes
? What is the name of your field? title

? What is the type of your field? String

? Do you want to add validation rules to your field? No
Generating field #2

? Do you want to add a field to your entity? Yes

? What is the name of your field? author

? What is the type of your field? String

? Do you want to add validation rules to your field? No
Generating field #3

? Do you want to add a field to your entity? Yes

? What is the name of your field? releaseDate

? What is the type of your field? LocalDate (Warning: only compatible with cassandra v3)

? Do you want to add validation rules to your field? No
? Do you want to use a Data Transfer Object (DTO)? No, use the entity directly

? Do you want to use separate service class for your business logic? No, the REST controller should use the repository directly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JHipster generates AngularJS code for the frontend and java code for the basic CRUD operations. It also generates the CQL script to create the Cassandra table for this new entity:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE IF NOT EXISTS book (
   id uuid,
   title text,
   author text,
   releaseDate date,
   PRIMARY KEY(id)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without stopping the cluster, you can execute the migration tool to run the CQL script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose -f src/main/docker/app.yml up yourapp-cassandra-migration
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Package the application into a new image and relaunch only its container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mvnw package -Pprod docker:build
docker-compose -f src/main/docker/app.yml up -d --no-deps yourapp-app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without restarting the Cassandra cluster, JHipster has created all the screens, the java code and has executed the migration script to create the new Cassandra table:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.raphael-brugier.com/img/jhipster-default-books.png&#34; width=&#34;100%&#34; /&gt;
&lt;/figure&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;By providing a simple tool to manage a Cassandra environment for development, tests and deployment JHipster is also providing best practices to start new applications based on Cassandra.&lt;/p&gt;

&lt;p&gt;You can find more on the &lt;a href=&#34;http://jhipster.github.io/&#34;&gt;JHipster project website&lt;/a&gt;.
Ippon USA is hosting a master class on JHipster with material designed by the JHipster creator, &lt;a href=&#34;https://www.eventbrite.com/e/jhipster-master-class-ippon-usa-tickets-21358779685&#34;&gt;register here&lt;/a&gt;!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
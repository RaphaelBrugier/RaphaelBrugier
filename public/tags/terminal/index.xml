<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raphael Brugier</title>
    <link>http://www.raphael-brugier.com/tags/terminal/index.xml</link>
    <description>Recent content on Raphael Brugier</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://www.raphael-brugier.com/tags/terminal/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>My development environment</title>
      <link>http://www.raphael-brugier.com/blog/my-development-environment/</link>
      <pubDate>Sun, 27 Nov 2016 18:02:03 -0500</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/my-development-environment/</guid>
      <description>&lt;p&gt;A customized development environment could be a huge productivity boost in the day to day work.
In this post, I will share the tools and configurations I currently use.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;terminal-iterm-2&#34;&gt;Terminal: iTerm 2&lt;/h1&gt;

&lt;p&gt;I use &lt;a href=&#34;https://iterm2.com/documentation-shell-integration.html&#34;&gt;iTerm 2&lt;/a&gt; 2 instead of the default terminal on mac.
On linux, I used terminator.&lt;/p&gt;

&lt;p&gt;iTerm 2 adds several features, the most important for me is the ability to have multiple panes and tabs.&lt;/p&gt;

&lt;h1 id=&#34;shell-zsh&#34;&gt;Shell: Zsh&lt;/h1&gt;

&lt;p&gt;Zsh is a shell very similar to bash, but it adds a lot of cooler features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a programmable autocompletion. You can navigate with the arrows keys the completion for example when browsing a directory&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a super history substring search&lt;/p&gt;

&lt;p&gt;brew install zsh&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;oh-my-zsh-and-zgen-to-customize-zsh&#34;&gt;oh-my-zsh and Zgen to customize Zsh&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;Oh-my-zsh&lt;/a&gt; is probably the most well known set of plugins to enhance Zsh.
It&amp;rsquo;s a super git repository of plugins, which you can enable to add aliases and parameters completion to your favorites tools.
I have used it for 3 years and have now switched to &lt;a href=&#34;https://github.com/tarjoilija/zgen&#34;&gt;Zgen&lt;/a&gt; to manage my plugins.
Zgen loads the plugins faster than oh-my-zsh and more importantly can load plugins from various github repositories.&lt;/p&gt;

&lt;p&gt;Here is my current list of plugins:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  #from zsh
  zgen oh-my-zsh
  zgen oh-my-zsh plugins/autojump
  zgen oh-my-zsh plugins/colored-man-pages
  zgen oh-my-zsh plugins/docker
  zgen oh-my-zsh plugins/docker-compose
  zgen oh-my-zsh plugins/git
  zgen oh-my-zsh plugins/golang
  zgen oh-my-zsh plugins/sudo

  #theme
  zgen load bhilburn/powerlevel9k powerlevel9k

  #extra plugins
  zgen load djui/alias-tips
  zgen load zsh-users/zsh-syntax-highlighting
  zgen load zsh-users/zsh-history-substring-search
  zgen load zsh-users/zsh-autosuggestions
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;autojump&#34;&gt;autojump&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/wting/autojump&#34;&gt;autojump&lt;/a&gt; is a faster way to navigate the directories, to jump to a directory that contains &amp;ldquo;Foo&amp;rdquo; in its name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  j foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install it with homebrew and then just add the corresponding oh-my-zsh plugin to load it in your $PATH:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install autojump
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;djui-alias-tips&#34;&gt;djui/alias-tips&lt;/h2&gt;

&lt;p&gt;This Zsh plugin will suggest the corresponding shorter alias after you type a command. Very useful when used in combination with one of the the oh-my-zsh plugins which could add a lot of aliases.&lt;/p&gt;

&lt;h1 id=&#34;dotfiles&#34;&gt;dotfiles&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve started versioning my &amp;ldquo;dotfiles&amp;rdquo; configuration a few years ago.
For this I use a git repository in my home: ~/dotfiles
The repository structure follows the hierarchy to install in my home directory.
For each file, a symbolic link is created in my home directory to point to the real file in my dotfile repository.&lt;/p&gt;

&lt;p&gt;The install script replace the &amp;ldquo;_&amp;rdquo; character with a dot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;!/bin/bash

# adapted from https://github.com/skeeto/dotfiles/blob/master/install.sh

## Install each _-prefixed file or dir
find . -regex &amp;quot;./_.*&amp;quot; -type f -print0 | sort -z | while read -d $&#39;\0&#39; file
do
    dotfile=${file/.\/_/.}

    ## Install directory first
    if [ ! -e $(dirname ~/$dotfile) ]; then
    	echo &amp;quot;create directory: &amp;quot;
    	echo $(dirname ~/$dotfile)
        mkdir -p -m 700  $(dirname ~/$dotfile)
    fi

    ## Create a link to the repository version
    echo Installing $dotfile
    ln -fs $(pwd)/$file ~/$dotfile
    chmod go-rwx $file
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;dev-tools&#34;&gt;Dev tools:&lt;/h1&gt;

&lt;p&gt;The other tools I use every day, which would require a post on their own for each&lt;/p&gt;

&lt;h3 id=&#34;intellij&#34;&gt;IntelliJ&lt;/h3&gt;

&lt;p&gt;The best IDE! The refactoring tools are still impressive, and too often unknown.&lt;/p&gt;

&lt;h3 id=&#34;docker&#34;&gt;Docker&lt;/h3&gt;

&lt;p&gt;I use Docker to test technologies, start and throw away tools for my projects, etc&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
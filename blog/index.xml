<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog-rsses on Raphael Brugier</title>
    <link>http://www.raphael-brugier.com/blog/index.xml</link>
    <description>Recent content in Blog-rsses on Raphael Brugier</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Nov 2016 18:37:21 -0500</lastBuildDate>
    <atom:link href="http://www.raphael-brugier.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>git commit fixup</title>
      <link>http://www.raphael-brugier.com/blog/git-commit-fixup/</link>
      <pubDate>Wed, 23 Nov 2016 18:37:21 -0500</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/git-commit-fixup/</guid>
      <description>&lt;p&gt;In this article, I will describe a git option to quickly fix a previous commit.
This sometimes happens when I want to fix a typo in a previous commit after few new commits.
The goal is to keep a &amp;ldquo;clean&amp;rdquo; git history with consistent commits adding features to facilitate the code reviews.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;(!) Of course, like any &amp;ldquo;rewriting history&amp;rdquo; command which modifies a previous command, it should be used with caution and never used to modify a commit already push.&lt;/p&gt;

&lt;h2 id=&#34;the-options&#34;&gt;The options&lt;/h2&gt;

&lt;p&gt;The option is &lt;code&gt;--fixup&lt;/code&gt; to create a commit fixing a previous one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit --fixup &amp;lt;commit to fix&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to automatically apply the &lt;code&gt;fixup&lt;/code&gt; commit when rebasing, add &lt;code&gt;--autosquash&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase -i origin/master --autosquash
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example:&lt;/h2&gt;

&lt;p&gt;Starting with the following git history:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$git log --oneline --decorate
d36dc2f code code code
7add401 add README
fb5b59c initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you realize you did a typo in the initial README file you can fix and want to modify the &amp;lsquo;add README&amp;rsquo; commit instead of creating a new commit for a typo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;${fix the typo}
$git add .
$git commit --fixup 7add401
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git has created a commit with a message prefixed with &amp;lsquo;!fixup&amp;rsquo; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$git log --oneline --decorate
7fd8071 (HEAD -&amp;gt; master) fixup! add README
d36dc2f code code code
7add401 add README
fb5b59c initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you can rewrite the git history of the 3 previous commits with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase --interactive --autosquash HEAD~3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$git log --oneline --decorate
3ec6daa (HEAD -&amp;gt; master) code code code
d6c4c24 add README
fb5b59c initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;--autosquash&lt;/code&gt; option has automatically reordered and applied the fixup commit.
Note that this option only works with an interactive rebase.&lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;--autosquash&lt;/code&gt; option only applies to fixup commit, it is safe to  enable it by default in the git config:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global rebase.autosquash true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And voilà! No more almost empty commits to fix typos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://robots.thoughtbot.com/autosquashing-git-commits&#34;&gt;source&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Docker to simplify Cassandra development in JHipster</title>
      <link>http://www.raphael-brugier.com/blog/using-docker-to-simplify-cassandra-development-in-jhipster/</link>
      <pubDate>Mon, 27 Jun 2016 20:33:11 -0500</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/using-docker-to-simplify-cassandra-development-in-jhipster/</guid>
      <description>&lt;p&gt;JHipster is an open source project that generates a fully working application in seconds. With a minimal configuration, JHipster accelerates the start of new projects by integrating frontend, backend, security and a database.&lt;/p&gt;

&lt;p&gt;Cassandra is one of the supported databases and JHipster generates all the configuration needed to access the cluster.&lt;/p&gt;

&lt;p&gt;But it is often hard for the developers to configure and maintain a local Cassandra cluster.&lt;/p&gt;

&lt;p&gt;Moreover, there is no standard tooling to manage the schema migrations, like Liquibase or Flyway for SQL databases, making it difficult to synchronize the schema between every environment and a local configuration.&lt;/p&gt;

&lt;p&gt;JHipster’s goal is to provide the most simple and productive development environment out of the box for the developers, and this tool has been added in the latest (3.4.0) version.&lt;/p&gt;

&lt;p&gt;In this post, I’ll describe the design of the tool and the basic commands to use it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;design&#34;&gt;Design&lt;/h1&gt;

&lt;p&gt;A Docker Compose[1] configuration is generated to start a Cassandra cluster locally with one command. A set of bash scripts automatically save the executed migrations in a dedicated table. This allows you to automatically[2] execute only the new migration scripts when deploying a new version of the application.
The tool can be used both by the developers to synchronize their local cluster and in production to keep track of the schema migrations.&lt;/p&gt;

&lt;p&gt;The standardization of the migration scripts is also used by the integration tests to start an in-memory Cassandra cluster.&lt;/p&gt;

&lt;p&gt;[1]: JHipster uses the v2 of the Docker Compose file format and Docker 1.10+ and Compose 1.6+ are required.&lt;/p&gt;

&lt;p&gt;[2]: Because the migration scripts are read from a Docker volume, the sources must be located in the use directory.&lt;/p&gt;

&lt;h2 id=&#34;basic-commands-to-run-the-migration-tool&#34;&gt;Basic commands to run the migration tool&lt;/h2&gt;

&lt;p&gt;Launch a JHipster application and a Cassandra cluster:&lt;/p&gt;

&lt;p&gt;First you need to build a Docker image containing your application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mvnw package -Pprod docker:build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can run this image and the other services with Docker Compose:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose -f src/main/docker/app.yml up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compose starts 4 Docker containers:&lt;/p&gt;

&lt;p&gt;The application image
- A first Cassandra node acting as the contact point
- A second node joining the cluster
- A service executing the schema migrations
- Thanks to Docker Compose, it is easy to add new nodes in the cluster:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose -f src/main/docker/app.yml scale yourapp-cassandra-node=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new node automatically joins the Cassandra cluster using the first node as a contact point.
The container executing the migrations reads a dedicated folder – &lt;code&gt;config/cql/changelogs/&lt;/code&gt; by convention – to find the migration scripts.&lt;/p&gt;

&lt;p&gt;Like Liquibase, the migration tool stores the metadata of the executed scripts in a table named schema_version to keep track of executed scripts.&lt;/p&gt;

&lt;h2 id=&#34;modifying-the-schema-with-jhipster-and-using-the-migration-tool&#34;&gt;Modifying the schema with JHipster and using the migration tool:&lt;/h2&gt;

&lt;p&gt;With JHipster, it is possible to create a new domain entity in one command with a few questions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yo jhipster:entity book
Generating field #1? Do you want to add a field to your entity? Yes
? What is the name of your field? title

? What is the type of your field? String

? Do you want to add validation rules to your field? No
Generating field #2

? Do you want to add a field to your entity? Yes

? What is the name of your field? author

? What is the type of your field? String

? Do you want to add validation rules to your field? No
Generating field #3

? Do you want to add a field to your entity? Yes

? What is the name of your field? releaseDate

? What is the type of your field? LocalDate (Warning: only compatible with cassandra v3)

? Do you want to add validation rules to your field? No
? Do you want to use a Data Transfer Object (DTO)? No, use the entity directly

? Do you want to use separate service class for your business logic? No, the REST controller should use the repository directly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JHipster generates AngularJS code for the frontend and java code for the basic CRUD operations. It also generates the CQL script to create the Cassandra table for this new entity:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE IF NOT EXISTS book (
   id uuid,
   title text,
   author text,
   releaseDate date,
   PRIMARY KEY(id)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without stopping the cluster, you can execute the migration tool to run the CQL script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose -f src/main/docker/app.yml up yourapp-cassandra-migration
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Package the application into a new image and relaunch only its container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mvnw package -Pprod docker:build
docker-compose -f src/main/docker/app.yml up -d --no-deps yourapp-app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without restarting the Cassandra cluster, JHipster has created all the screens, the java code and has executed the migration script to create the new Cassandra table:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;http://www.raphael-brugier.com/img/jhipster-default-books.png&#34; width=&#34;100%&#34; /&gt;
&lt;/figure&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;By providing a simple tool to manage a Cassandra environment for development, tests and deployment JHipster is also providing best practices to start new applications based on Cassandra.&lt;/p&gt;

&lt;p&gt;You can find more on the &lt;a href=&#34;http://jhipster.github.io/&#34;&gt;JHipster project website&lt;/a&gt;.
Ippon USA is hosting a master class on JHipster with material designed by the JHipster creator, &lt;a href=&#34;https://www.eventbrite.com/e/jhipster-master-class-ippon-usa-tickets-21358779685&#34;&gt;register here&lt;/a&gt;!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A tour of Databricks Community Edition: a hosted Spark service</title>
      <link>http://www.raphael-brugier.com/blog/a-tour-of-databricks-community-edition-a-hosted-spark-service/</link>
      <pubDate>Wed, 13 Apr 2016 19:51:51 -0500</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/a-tour-of-databricks-community-edition-a-hosted-spark-service/</guid>
      <description>&lt;p&gt;With the &lt;a href=&#34;https://databricks.com/blog/2016/02/17/introducing-databricks-community-edition-apache-spark-for-all.html&#34;&gt;recent announcement&lt;/a&gt; of the Community Edition, it’s time to have a look at the Databricks Cloud solution.
Databricks Cloud is a hosted Spark service from Databricks, the team behind Spark.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Databricks Cloud offers many features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A cluster management service.

&lt;ul&gt;
&lt;li&gt;The service will spin up Amazon EC2 instances with Spark nodes already set up for you.&lt;/li&gt;
&lt;li&gt;Free 6GB memory cluster for the Community Edition and billed hourly per node for the regular version.&lt;/li&gt;
&lt;li&gt;The price will depend on the size of the instances and you can even mix on-demand and spot instances.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A notebook, to write Spark code either in Scala, Python or R, with version control and user role management.&lt;/li&gt;
&lt;li&gt;A scheduling service to turn notebooks or fat JARs into managed jobs.

&lt;ul&gt;
&lt;li&gt;The service also allows to manage streaming jobs and have failure notifications, as well as auto restart capabilities.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;And &lt;a href=&#34;https://databricks.com/blog/2016/02/17/introducing-databricks-dashboards.html&#34;&gt;more recently&lt;/a&gt;, a dashboarding service to turn your notebooks snippets into custom dashboard components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The notebook is where you will spend most of your time. It offers a fully interactive Spark environment, with the capabilities to add any dependencies from the Maven Central repository or to upload your own JARs to the cluster.&lt;/p&gt;

&lt;p&gt;Notebooks have been used for years for data exploration, but with the rise of Data Science, there has been a lot of traction for tools such as &lt;a href=&#34;http://jupyter.org/&#34;&gt;Jupyter&lt;/a&gt;, &lt;a href=&#34;http://spark-notebook.io/&#34;&gt;Spark notebook&lt;/a&gt;, or &lt;a href=&#34;https://zeppelin.incubator.apache.org/&#34;&gt;Apache Zeppelin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jupyter is an historical Python notebook (formerly known as IPython) that have been added a Spark extension, you could use Python of course, but also R and Scala. It’s more mature than Zeppelin and Jupyter notebooks are even integrated in &lt;a href=&#34;https://github.com/blog/1995-github-jupyter-notebooks-3&#34;&gt;GitHub&lt;/a&gt;.
But it would requires some extra configuration to get Scala and Spark support.&lt;/p&gt;

&lt;p&gt;Spark notebook was one of the first notebook to appear for Spark. It is limited to the Scala language, so it might not be the best choice if you have data analysts working primarily with Python.&lt;/p&gt;

&lt;p&gt;Zeppelin is still an incubating project from the Apache Foundation but it has received a lot of traction lately and it is promising. Compared to Databricks Cloud’s built-in notebook, Zeppelin is not dedicated to Spark but supports many more technologies via various connectors such as Cassandra or Flink. You will of course have to manage the deployment and configuration by yourself, but with the main benefit of having a fined-grained control over the infrastructure. While the Community Edition of Databricks Cloud involves some restrictions – smaller Amazon EC2 instances and no access to the scheduling component – it is still a great tool to get started with Spark, especially for learning and fast prototyping.&lt;/p&gt;

&lt;p&gt;To complete this introduction, let’s write an example of a Twitter stream processing and some visualizations.&lt;/p&gt;

&lt;p&gt;In this example, we’ll subscribe to the Twitter stream API which delivers roughly a 1% sample of all the tweets published in realtime. We’ll use Spark Streaming to process the stream and identify the language and country of each tweet.
We will store a sliding window of the results as a table and display the results as built-in visualizations in the notebook.&lt;/p&gt;

&lt;h1 id=&#34;step-0-community-edition-access&#34;&gt;Step 0: Community Edition access&lt;/h1&gt;

&lt;p&gt;You first need to &lt;a href=&#34;http://go.databricks.com/databricks-community-edition-beta-waitlist&#34;&gt;subscribe&lt;/a&gt; to Databricks Community Edition. This is still a private beta version but you should receive your invitation within one week.&lt;/p&gt;

&lt;p&gt;Once you have the Databricks Cloud, &lt;a href=&#34;https://databricks-prod-cloudfront.cloud.databricks.com/public/4027ec902e239c93eaaa8714f173bcfc/7631468844903857/1641217975453210/8780643444584178/latest.html&#34;&gt;import my notebook&lt;/a&gt;. This notebook is a partial reuse of the Databricks &lt;a href=&#34;https://docs.cloud.databricks.com/docs/latest/databricks_guide/index.html#08%20Spark%20Streaming/03%20Twitter%20Hashtag%20Count%20-%20Scala.html&#34;&gt;Twitter hash count&lt;/a&gt; example.&lt;/p&gt;

&lt;h1 id=&#34;step-1-prerequisite-libraries-and-imports&#34;&gt;Step 1: prerequisite libraries and imports&lt;/h1&gt;

&lt;p&gt;The example uses the Apache Tika library for the language recognition of the tweets.
To attach the dependency to your Spark cluster, follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the workspace, in your user space, open the “Create” dialog box and choose “library”&lt;/li&gt;
&lt;li&gt;Choose “maven coordinate” as a source&lt;/li&gt;
&lt;li&gt;Use “org.apache.tika:tika-core:1.12” as the Coordinate&lt;/li&gt;
&lt;li&gt;Make sure the “Attach automatically to all clusters.” box is checked in the library details of your workspace.&lt;/li&gt;
&lt;li&gt;The library and its dependencies will now be deployed to the cluster nodes.&lt;/li&gt;
&lt;li&gt;To verify this, you can access the “Cluster” tab and see “1 library loaded” in the your cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://www.raphael-brugier.com/img/clusterView.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;step-2-twitter-credentials&#34;&gt;Step 2: Twitter credentials&lt;/h1&gt;

&lt;p&gt;Because this example requires a connection to the Twitter stream API, you should create a Twitter application and acquire an OAuth token.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://apps.twitter.com/&#34;&gt;https://apps.twitter.com/&lt;/a&gt; and follow the steps to create your Twitter application.&lt;/li&gt;
&lt;li&gt;You should then answer Step 2 questions to enter your credentials.&lt;/li&gt;
&lt;li&gt;These credentials will then be automatically picked by the Twitter4j library and the Spark Streaming wrapper to create a Twitter stream.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://www.raphael-brugier.com/img/twitterCredentials.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;step-3-run-the-twitter-streaming-job&#34;&gt;Step 3: Run the Twitter streaming job&lt;/h1&gt;

&lt;p&gt;Execute step 3’s code in the notebook, so as to create a StreamingContext and run it in the cluster.&lt;/p&gt;

&lt;p&gt;The code will initialize the Twitter stream, and for each tweet received, it will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transform the country code from a two-letter code to a three-letter code. This is because the Databricks notebook requires an ISO 3166-1 alpha-3 code for the country.&lt;/li&gt;
&lt;li&gt;Detect the language of the tweet using the Tika library. Because tweets are small portions of text containing hashtags, usernames, etc; the detection could unfortunately be inaccurate.&lt;/li&gt;
&lt;li&gt;Wrap the result in a Tweet case class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The output of the stream, a sliding window of the last 30 seconds tweets, is then written to a temporary “SQL” table, to be queryable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class Tweet(user: String, text: String, countryCode: String, language: String)

// Initialize the language identifier library
LanguageIdentifier.initProfiles()

// Initialize a map to convert Countries from 2 chars iso encoding to 3 characters
val iso2toIso3Map: Map[String, String] = Locale.getISOCountries()
  .map(iso2 =&amp;gt; iso2 -&amp;gt; new Locale(&amp;quot;&amp;quot;, iso2).getISO3Country)
  .toMap

// detect a language from a text content using the Apache Tika library
def detectLanguage(text: String): String = {
    new LanguageIdentifier(text).getLanguage
}

// This is the function that creates the SteamingContext and sets up the Spark Streaming job.
def creatingFunc(): StreamingContext = {
  // Create a Spark Streaming Context.
  val slideInterval = Seconds(1)
  val ssc = new StreamingContext(sc, slideInterval)
  ssc.remember(Duration(100))
  // Create a Twitter Stream for the input source. 
  val auth = Some(new OAuthAuthorization(new ConfigurationBuilder().build()))

  val twitterStream = TwitterUtils.createStream(ssc, auth)
          .filter(t=&amp;gt; t.getPlace != null)
          .map(t =&amp;gt; Tweet(t.getUser.getName, t.getText, iso2toIso3Map.getOrElse(t.getPlace.getCountryCode, &amp;quot;&amp;quot;), detectLanguage(t.getText)))
                .window(windowDuration = Seconds(30), slideDuration = Seconds(10))
            .foreachRDD { rdd =&amp;gt; 
              val sqlContext = SQLContext.getOrCreate(SparkContext.getOrCreate())
                  // this is used to implicitly convert an RDD to a DataFrame.
                import sqlContext.implicits._
                rdd.toDF().registerTempTable(&amp;quot;tweets&amp;quot;)
            }
  ssc
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-4-visualizations&#34;&gt;Step 4: Visualizations&lt;/h1&gt;

&lt;p&gt;Now, tweets are automatically stored and updated from the sliding window and we can query the table and use the notebook’s built-in visualizations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tweets by country:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.raphael-brugier.com/img/tweetsByCountry.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tweets by language:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.raphael-brugier.com/img/tweetsByLanguage.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can run virtually any SQL query on the last 30 seconds of the 1% sample of tweets emitted from all-over the world!&lt;/p&gt;

&lt;p&gt;Even if the visualizations can be exported to a dashboard, they still need to be refreshed manually. This is because you cannot create Spark jobs in the community edition. However, the non-Community version allows to &lt;a href=&#34;https://community.cloud.databricks.com/?o=7631468844903857#externalnotebook/https%3A%2F%2Fdocs.cloud.databricks.com%2Fdocs%2Flatest%2Fdatabricks_guide%2Findex.html%2302%2520Product%2520Overview%2F06%2520Jobs.html&#34;&gt;turn this notebook into an actual Spark Streaming job&lt;/a&gt; running indefinitely while refreshing a dashboard of visualizations.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Databricks Community Edition offers a nice subset of Databricks Cloud for free. It is a nice playground to start with Spark and notebooks. It also offers the integration of the very complete &lt;a href=&#34;https://community.cloud.databricks.com/?o=7631468844903857#externalnotebook/https%3A%2F%2Fdocs.cloud.databricks.com%2Fdocs%2Flatest%2Fcourses%2Findex.html%23Introduction%2520to%2520Big%2520Data%2520with%2520Apache%2520Spark%2520(CS100-1x)%2FIntroduction%2520(README).html&#34;&gt;Introduction to Big Data with Apache Spark&lt;/a&gt; course taught by Berkeley University.&lt;/p&gt;

&lt;p&gt;Besides this, before jumping to the professional edition, you will have to consider the tradeoffs between an all-in-one service like Databricks Cloud – that can become pricey for long running jobs – versus managed clusters (Amazon EMR, Google Dataproc, …) or in-house hosting with fine grained control of the infrastructure of the nodes but with additional maintenance costs.&lt;/p&gt;

&lt;p&gt;See the notebook in action in &lt;a href=&#34;https://databricks-prod-cloudfront.cloud.databricks.com/public/4027ec902e239c93eaaa8714f173bcfc/7631468844903857/1641217975453210/8780643444584178/latest.html&#34;&gt;Databricks cloud&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Testing strategy for Spark Streaming – Part 2 of 2</title>
      <link>http://www.raphael-brugier.com/blog/testing-strategy-for-apache-spark-jobs-2-of-2/</link>
      <pubDate>Wed, 30 Mar 2016 19:25:01 -0500</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/testing-strategy-for-apache-spark-jobs-2-of-2/</guid>
      <description>&lt;p&gt;In a &lt;a href=&#34;http://www.raphael-brugier.com/blog/testing-strategy-for-apache-spark-jobs-1-of-2/&#34;&gt;previous post&lt;/a&gt;, we’ve seen why it’s important to test your Spark jobs and how you could easily unit test the job’s logic, first by designing your code to be testable and then by writing unit tests.&lt;/p&gt;

&lt;p&gt;In this post, we will look at applying the same pattern to another important part of the Spark engine: Spark Streaming.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;spark-streaming-example&#34;&gt;Spark Streaming example&lt;/h1&gt;

&lt;p&gt;Spark Streaming is an extension of Spark to implement streaming processing on top of the batch engine. The base idea is to accumulate a flow of events in micro-batches and then process them separately. As for a signal, the stream is discretized and thus named DStream in the Spark API.&lt;/p&gt;

&lt;p&gt;For this example, we will simply generate a stream of characters in input, and have each character capitalized in the output stream. To spice up the thing, the output will be a sliding window.&lt;/p&gt;

&lt;p&gt;We will configure the batch duration to 1 second, the window duration to 3 seconds and the slide duration to 2 seconds.&lt;/p&gt;

&lt;p&gt;This is better explained with the following diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.raphael-brugier.com/img/sparkCapitalizedWindowedStream.png&#34; alt=&#34;Spark capitalized windowed stream&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the code implementing this process:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.ipponusa

import org.apache.spark.SparkConf
import org.apache.spark.rdd.RDD
import org.apache.spark.streaming.{Seconds, StreamingContext}
import scala.collection.mutable

object MainStreaming {

  val sparkConf = new SparkConf()
    .setMaster(&amp;quot;local[*]&amp;quot;)
    .setAppName(&amp;quot;spark-streaming-testing-example&amp;quot;)

  val ssc = new StreamingContext(sparkConf, Seconds(1))

  def main(args: Array[String]) {

    val rddQueue = new mutable.Queue[RDD[Char]]()

    ssc.queueStream(rddQueue)
      .map(_.toUpper)
      .window(windowDuration = Seconds(3), slideDuration = Seconds(2))
      .print()

    ssc.start()

    for (c &amp;lt;- &#39;a&#39; to &#39;z&#39;) {
      rddQueue += ssc.sparkContext.parallelize(List(c))
    }

    ssc.awaitTermination()
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we simulate a stream of characters by continuously adding them as RDDs of one character in a mutable Queue.&lt;/p&gt;

&lt;p&gt;We create a QueueStream to wrap the Queue as an InputDStream. Because the QueueInputDStream is mainly designed for testing, each RDD is consumed one by one by default. We have configured the StreamingContext to have batches of 1 second, hence each character will be consumed by the stream logic every 1 second.&lt;/p&gt;

&lt;p&gt;When you run this code, the Spark engine will print the last 3 capitalized letters every 2 seconds.&lt;/p&gt;

&lt;h1 id=&#34;testing-stream-operations&#34;&gt;Testing stream operations&lt;/h1&gt;

&lt;p&gt;As in the previous article, the pattern to make the code testable consists in extracting the logic in a separate function that takes a DStream in parameter and that returns the resulting DStream.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.ipponusa
import org.apache.spark.streaming.Seconds
import org.apache.spark.streaming.dstream.DStream

object StreamOperations {

  def capitalizeWindowed(input: DStream[Char]): DStream[Char] = {
    input.map(_.toUpper)
          .window(windowDuration = Seconds(3), slideDuration = Seconds(2))
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main problem with testing Streams is their time-based nature. To compare the output stream to an expected other set of data, you will have to do the assertion at the instant where the engine consumes the input. Adding &lt;code&gt;Thread.Sleep(...)&lt;/code&gt; would be an inaccurate solution and will have the major drawback to dramatically slow down your tests.&lt;/p&gt;

&lt;p&gt;The appropriate solution to control the time is to use the “Virtual Clock” pattern, where you replace the system’s clock with your own implementation. During the execution of the test, you can then change the value returned by the clock and therefore control the timing.&lt;/p&gt;

&lt;p&gt;Internally, Spark uses this pattern with a &lt;a href=&#34;https://github.com/apache/spark/blob/master/core/src/main/scala/org/apache/spark/util/Clock.scala#L23&#34;&gt;Clock&lt;/a&gt; interface and a default implementation returning the system time. It allows to replace this implementation by your own implementation by setting the &lt;code&gt;spark.streaming.clock&lt;/code&gt; param when configuring the &lt;code&gt;SparkContext&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is how Spark internal unit tests work, by replacing the &lt;a href=&#34;https://github.com/apache/spark/blob/master/core/src/main/scala/org/apache/spark/util/Clock.scala#L31&#34;&gt;SystemClock&lt;/a&gt; implementation with &lt;a href=&#34;https://github.com/apache/spark/blob/master/core/src/main/scala/org/apache/spark/util/ManualClock.scala#L27&#34;&gt;ManualClock&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, the Clock interface has a package protected visibility limited to the &lt;code&gt;org.apache.spark package&lt;/code&gt;. But we can workaround this by placing our own implementation extending the interface in this same package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package org.apache.spark
import java.util.Date
import org.apache.spark.streaming.Duration

class FixedClock(var currentTime: Long) extends org.apache.spark.util.Clock {

  def this() = this(0L)

  def setCurrentTime(time: Date): Unit = synchronized {
    currentTime = time.getTime
    notifyAll()
  }

  def addTime(duration: Duration): Unit = synchronized {
    currentTime += duration.toMillis
    notifyAll()
  }

  override def getTimeMillis(): Long = synchronized {
    currentTime
  }

  override def waitTillTime(targetTime: Long): Long = synchronized {
    while (currentTime &amp;lt; targetTime) {
      wait(10)
    }
    getTimeMillis()
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then add an utility method to workaround the private accessibility of the &lt;code&gt;Clock&lt;/code&gt; in the &lt;code&gt;StreamingContext&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package org.apache.spark.streaming
import org.apache.spark.FixedClock

object Clock {
  def getFixedClock(ssc: StreamingContext): FixedClock = {
    ssc.scheduler.clock.asInstanceOf[FixedClock]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The test can now be written:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.ipponusa
import java.util.concurrent.TimeUnit
import org.apache.spark.rdd.RDD
import org.apache.spark.streaming.{Clock, Seconds, StreamingContext}
import org.apache.spark.{FixedClock, SparkConf, SparkContext}
import org.scalatest.concurrent.Eventually
import org.scalatest.time.{Millis, Span}
import org.scalatest.{BeforeAndAfter, FlatSpec, Matchers}
import scala.collection.mutable
import scala.collection.mutable.ListBuffer
import scala.concurrent.duration.Duration

class StreamingTest extends FlatSpec with Matchers with BeforeAndAfter with Eventually {

  var sc:SparkContext = _
  var ssc: StreamingContext = _
  var fixedClock: FixedClock = _

  override implicit val patienceConfig = PatienceConfig(timeout = scaled(Span(1500, Millis)))

  before {
    val sparkConf = new SparkConf()
      .setMaster(&amp;quot;local[*]&amp;quot;)
      .setAppName(&amp;quot;test-streaming&amp;quot;)
      .set(&amp;quot;spark.streaming.clock&amp;quot;, &amp;quot;org.apache.spark.FixedClock&amp;quot;)

    ssc = new StreamingContext(sparkConf, Seconds(1))
    sc = ssc.sparkContext
    fixedClock = Clock.getFixedClock(ssc)
  }

  after {
    ssc.stop(stopSparkContext = true, stopGracefully = false)
  }

  behavior of &amp;quot;stream transformation&amp;quot;

  it should &amp;quot;apply transformation&amp;quot; in {
    val inputData: mutable.Queue[RDD[Char]] = mutable.Queue()
    var outputCollector = ListBuffer.empty[Array[Char]]

    val inputStream = ssc.queueStream(inputData)
    val outputStream = StreamOperations.capitalizeWindowed(inputStream)

    outputStream.foreachRDD(rdd=&amp;gt; {outputCollector += rdd.collect()})

    ssc.start()

    inputData += sc.makeRDD(List(&#39;a&#39;))
    wait1sec() // T = 1s

    inputData += sc.makeRDD(List(&#39;b&#39;))
    wait1sec() // T = 2s

    assertOutput(outputCollector, List(&#39;A&#39;,&#39;B&#39;))

    inputData += sc.makeRDD(List(&#39;c&#39;))
    wait1sec() // T = 3s

    inputData += sc.makeRDD(List(&#39;d&#39;))
    wait1sec() // T = 4s
    assertOutput(outputCollector, List(&#39;B&#39;, &#39;C&#39;, &#39;D&#39;))

    // wait until next slide
    wait1sec() // T = 5s
    wait1sec() // T = 6s
    assertOutput(outputCollector, List(&#39;D&#39;))
  }

  def assertOutput(result: Iterable[Array[Char]], expected: List[Char]) =
    eventually {
      result.last.toSet should equal(expected.toSet)
    }

  def wait1sec(): Unit = {
    fixedClock.addTime(Seconds(1))
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here again, we start a StreamingContext before running the test and we’ll stop it after.
We also replace the clock with our own implementation so that we can control the time.
Like in the &lt;code&gt;Main&lt;/code&gt; example, we use a &lt;code&gt;QueueInputDStream&lt;/code&gt; to simulate the input of data.
We also use a &lt;code&gt;ListBuffer&lt;/code&gt; to stack the resulting value of the &lt;code&gt;OuputDStream&lt;/code&gt; collected with the &lt;code&gt;forEachRDD(…)&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;One extra tricky thing…&lt;/p&gt;

&lt;p&gt;Because the processing of the DStream occurs in a separated thread, when we change the time to the exact instant of the sliding window trigger, it still requires a few extra ms to do the actual computation.
Thus, as suggested in &lt;a href=&#34;http://mkuthan.github.io/blog/2015/03/01/spark-unit-testing/&#34;&gt;this post&lt;/a&gt; about testing Spark, we protect the assertion with an eventually block from ScalaTest’s Eventually trait.
The patienceConfig set the timeout to retry the assertion multiple times before a time-out.&lt;/p&gt;

&lt;p&gt;We now have a fast and predictable test to ensure the streaming operations’ correctness!&lt;/p&gt;

&lt;h1 id=&#34;spark-testing-base-library&#34;&gt;Spark-testing-base library&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/holdenk/spark-testing-base&#34;&gt;Spark-testing-base&lt;/a&gt; library have some built-in trait and methods to help you test the streaming logic.&lt;/p&gt;

&lt;p&gt;When using the library, the &lt;code&gt;FixedClock&lt;/code&gt; workaround is also already implemented.&lt;/p&gt;

&lt;p&gt;Let’s rewrite the window test with the StreamingSuiteBase trait:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.ipponusa
import com.holdenkarau.spark.testing.StreamingSuiteBase

class StreamingWithSparkTestingTest extends StreamingSuiteBase {

  test(&amp;quot;capitalize by window&amp;quot;) {
    val input = List(List(&#39;a&#39;), List(&#39;b&#39;), List(&#39;c&#39;), List(&#39;d&#39;), List(&#39;e&#39;))

    val slide1 = List(&#39;A&#39;, &#39;B&#39;)
    val slide2 = List(&#39;B&#39;, &#39;C&#39;, &#39;D&#39;)
    val expected = List(slide1, slide2)

    testOperation(input, StreamOperations.capitalizeWindowed, expected)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;StreamingSuiteBase&lt;/code&gt; trait will take care of all the setup we had manually prepared in the previous test: starting and stopping the &lt;code&gt;StreamingContext&lt;/code&gt;, replacing the &lt;code&gt;Clock&lt;/code&gt; in the engine, and incrementing the time when each element is consumed.&lt;/p&gt;

&lt;p&gt;Unlike the &lt;code&gt;RDDComparisons.compare(...)&lt;/code&gt; method shown in the previous article, where the comparison was distributed, the elements are collected locally from the OutputDStream. Be sure not to produce too much data in your tests or you can rapidly run out of memory.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;While requiring more setup and care than testing batch jobs, it is also possible to test Spark Streaming jobs.
Controlling the time is the key to having a predictable output to compare results to expected ones.&lt;/p&gt;

&lt;p&gt;The Spark-testing-base library can be very helpful, especially to avoid the workarounds.&lt;/p&gt;

&lt;p&gt;You can find the code of these examples on &lt;a href=&#34;https://github.com/raphaelbrugier/spark-testing-example&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Testing strategy for Apache Spark jobs – Part 1 of 2</title>
      <link>http://www.raphael-brugier.com/blog/testing-strategy-for-apache-spark-jobs-1-of-2/</link>
      <pubDate>Sat, 12 Mar 2016 18:34:26 -0500</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/testing-strategy-for-apache-spark-jobs-1-of-2/</guid>
      <description>&lt;p&gt;Like any other application, Apache Spark jobs deserve good testing practices and coverage.&lt;/p&gt;

&lt;p&gt;Indeed, the costs of running jobs with production data makes unit testing a must-do to have a fast feedback loop and discover the errors earlier.&lt;/p&gt;

&lt;p&gt;But because of its distributed nature and the RDD abstraction on top of the data, Spark requires special care for testing.&lt;/p&gt;

&lt;p&gt;In this post, we’ll explore how to design your code for testing, how to setup a simple unit-test for your job logic and how the &lt;a href=&#34;https://github.com/holdenk/spark-testing-base&#34;&gt;spark-testing-base&lt;/a&gt; library can help.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;design-for-testing&#34;&gt;Design for testing&lt;/h1&gt;

&lt;p&gt;From a higher point of view, any Spark job can be described as an “immutable” a transformation of distributed data.&lt;/p&gt;

&lt;p&gt;In particular, any Spark job can be refactored to a composition of functions taking data as input, the so-called RDD, and returning data, hence a RDD again.&lt;/p&gt;

&lt;p&gt;Extracting the logic of the job into functions will make it possible to reuse the functions across different jobs and to isolate the behavior to test it in a deterministic environment.&lt;/p&gt;

&lt;p&gt;To separate the logic from the scheduling and configuration of the job, you will also want to isolate the logic to a separated object.&lt;/p&gt;

&lt;p&gt;Let’s apply this pattern to the well-known word count example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.ipponusa
import org.apache.spark.{SparkConf, SparkContext}

object Main {

  val sparkConf = new SparkConf()
    .setMaster(&amp;quot;local[*]&amp;quot;)
    .setAppName(&amp;quot;spark-testing-example&amp;quot;)
  val sc = new SparkContext(sparkConf)

  def main(args: Array[String]) {
    val countByWordRdd =  sc.textFile(&amp;quot;src/main/resources/intro.txt&amp;quot;)
      .flatMap(l =&amp;gt; l.split(&amp;quot;\\W+&amp;quot;))
      .map(word =&amp;gt; (word, 1))
      .reduceByKey(_ + _)

    countByWordRdd.foreach(println)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extracting a method is a &lt;a href=&#34;http://refactoring.com/catalog/extractMethod.html&#34;&gt;classic refactoring pattern&lt;/a&gt;. Therefore, this can be easily done with a few keystrokes within your favorite IDE:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extract the input data in a separated variable to separate it from the logic&lt;/li&gt;
&lt;li&gt;Extract the logic in a count method (select + refactor -&amp;gt; extract -&amp;gt; method)&lt;/li&gt;
&lt;li&gt;Move the method to a new object, WordCounter&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.ipponusa
import org.apache.spark.rdd.RDD
import org.apache.spark.{SparkConf, SparkContext}

object Main {

  val sparkConf = new SparkConf()
    .setMaster(&amp;quot;local[*]&amp;quot;)
    .setAppName(&amp;quot;spark-testing-example&amp;quot;)
  val sc = new SparkContext(sparkConf)

  def main(args: Array[String]) {
    val input: RDD[String] = sc.textFile(&amp;quot;src/main/resources/intro.txt&amp;quot;)
    val countByWordRdd: RDD[(String, Int)] = WordCounter.count(input)

    countByWordRdd.foreach(println)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.ipponusa
import org.apache.spark.rdd.RDD

object WordCounter {
  def count(lines: RDD[String]): RDD[(String, Int)] = {
    val wordsCount = lines.flatMap(l =&amp;gt; l.split(&amp;quot;\\W+&amp;quot;))
      .map(word =&amp;gt; (word, 1))
      .reduceByKey(_ + _)
    wordsCount
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;basic-test&#34;&gt;Basic test&lt;/h1&gt;

&lt;p&gt;Now that we have extracted the logic, we can write a test assuming an input data and asserting the result of the function to an expected data. We will use &lt;a href=&#34;http://www.scalatest.org/&#34;&gt;ScalaTest&lt;/a&gt; as a testing framework.&lt;/p&gt;

&lt;p&gt;The tricky part when writing tests for Spark is the RDD abstraction. Your first idea would probably be to mock the input and the expected. But then, you will not be able to execute the Spark behavior on the RDD passed to the function.&lt;/p&gt;

&lt;p&gt;Instead, we have to start a &lt;code&gt;SparkContext&lt;/code&gt; to build the input and expected RDDs and run the transformation in a real Spark environment. Indeed, creating a &lt;code&gt;SparkContext&lt;/code&gt; for unit testing is the &lt;a href=&#34;http://spark.apache.org/docs/latest/programming-guide.html#unit-testing&#34;&gt;recommended approach&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because starting a &lt;code&gt;SparkContext&lt;/code&gt; is time-consuming, you will save a lot of time starting the context only once before all the tests. Also, even if it possible with some tweaking, it is not recommended to have more than one &lt;code&gt;SparkContext&lt;/code&gt; living in the JVM. So make sure you stop the context after running all the tests and to disable the parallel execution.&lt;/p&gt;

&lt;p&gt;Starting and stopping the &lt;code&gt;SparkContext&lt;/code&gt; can easily be done with the &lt;code&gt;BeforeAndAfter&lt;/code&gt; trait.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.ipponusa
import org.apache.spark.rdd.RDD
import org.apache.spark.{SparkConf, SparkContext}
import org.scalatest.{BeforeAndAfter, FlatSpec, Matchers}

class WordCounterTest extends FlatSpec with Matchers with BeforeAndAfter {

  var sc:SparkContext = _

  before {
    val sparkConf = new SparkConf()
      .setMaster(&amp;quot;local[*]&amp;quot;)
      .setAppName(&amp;quot;test-wordcount&amp;quot;)
    sc = new SparkContext(sparkConf)
  }

  after {
    sc.stop()
  }

  behavior of &amp;quot;Words counter&amp;quot;

  it should &amp;quot;count words in a text&amp;quot; in {
    val text =
      &amp;quot;&amp;quot;&amp;quot;Hello Spark
        |Hello world
      &amp;quot;&amp;quot;&amp;quot;.stripMargin
    val lines: RDD[String] = sc.parallelize(List(text))
    val wordCounts: RDD[(String, Int)] = WordCounter.count(lines)

    wordCounts.collect() should contain allOf ((&amp;quot;Hello&amp;quot;, 2), (&amp;quot;Spark&amp;quot;, 1), (&amp;quot;world&amp;quot;, 1))
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;spark-testing-base-library&#34;&gt;Spark-testing-base library&lt;/h1&gt;

&lt;p&gt;Setting up the &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; methods for all your test cases can become tedious if you have many tests. An alternative could be to hold the Context in a Singleton Object and start it once for all the tests, or to inherits a common trait to implement this behavior.&lt;/p&gt;

&lt;p&gt;Also, the previous example works fine when working with a local cluster where all the data can fit in memory.
But if you are testing with a lot of data, a large sample of your production data for example, calling the &lt;code&gt;collect()&lt;/code&gt; method to gather all the data locally to compare with an expected output is no longer an option.&lt;/p&gt;

&lt;p&gt;Fortunately, the spark-testing-base library provides traits and methods to prepare your tests and run distributed comparisons.&lt;/p&gt;

&lt;p&gt;Let’s import the library and rewrite the test:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pom.xml&lt;/code&gt; extract:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependencies&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.spark&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spark-core_${scala.dep.version}&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${spark.version}&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;!--spark-testing has a dependency to spark-sql, spark-hive, spark-mllib --&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.spark&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spark-sql_${scala.dep.version}&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${spark.version}&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.spark&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spark-hive_${scala.dep.version}&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${spark.version}&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.spark&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spark-mllib_${scala.dep.version}&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${spark.version}&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.scalatest&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;scalatest_${scala.dep.version}&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.2.6&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.holdenkarau&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spark-testing-base_${scala.dep.version}&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${spark.version}_0.3.2-SNAPSHOT&amp;lt;/version&amp;gt;
  &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
  &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.ipponusa
import com.holdenkarau.spark.testing.{RDDComparisons, RDDGenerator, SharedSparkContext}
import org.apache.spark.rdd.RDD
import org.scalacheck.Arbitrary
import org.scalacheck.Prop._
import org.scalatest.prop.Checkers
import org.scalatest.{FlatSpec, Matchers}

@RunWith(classOf[JUnitRunner])
class WordCounterWithSparkTestingTest extends FlatSpec with Matchers with SharedSparkContext{

  behavior of &amp;quot;Words counter&amp;quot;

  it should &amp;quot;count words in a text&amp;quot; in {
    val text =
      &amp;quot;&amp;quot;&amp;quot;Hello Spark
        |Hello world
      &amp;quot;&amp;quot;&amp;quot;.stripMargin

    val inputRdd: RDD[String] = sc.parallelize(List(text))
    val expectedRdd: RDD[(String, Int)] = sc.parallelize(List((&amp;quot;Hello&amp;quot;, 2), (&amp;quot;Spark&amp;quot;, 1), (&amp;quot;world&amp;quot;, 1)))

    val resRdd: RDD[(String, Int)] = WordCounter.count(inputRdd)
    assert(None === RDDComparisons.compare(resRdd, expectedRdd))
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The test class now extends the &lt;code&gt;SharedSparkContext&lt;/code&gt; trait instead of &lt;code&gt;BeforeAndAfter&lt;/code&gt;. This trait will automatically take care of starting and stopping a &lt;code&gt;SparkContext&lt;/code&gt; for you.&lt;/p&gt;

&lt;p&gt;The method RDDComparisons.compare(…) is more interesting.&lt;/p&gt;

&lt;p&gt;Instead of locally collecting the data to be compared, the comparison will be run as RDD operations on Spark nodes. Even if this may involve a lot of shuffling operations, the data is still distributed and thus can fit in memory.&lt;/p&gt;

&lt;p&gt;Of course, in the same manner, the input and expected data would not be loaded locally but most probably from external distributed storage.&lt;/p&gt;

&lt;p&gt;Like HDFS for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val inputRdd = sc.textFile(&amp;quot;hdfs://127.0.0.1:9000/data/test/bigInput.txt&amp;quot;)
val expectedRdd = sc.textFile(&amp;quot;hdfs://127.0.0.1:9000/data/test/bigExpected.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The spark-testing-base library also provides methods for property-based testing via an integration of the &lt;a href=&#34;https://www.scalacheck.org/&#34;&gt;ScalaCheck&lt;/a&gt; library.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;class WordCounterWithSparkTestingTest extends FlatSpec with Matchers with SharedSparkContext with Checkers {

  behavior of &amp;quot;Words counter&amp;quot;
  
  it should &amp;quot;have stable count, with generated RDDs&amp;quot; in {
     val stableProperty =
       forAll(RDDGenerator.genRDD[String](sc)(Arbitrary.arbitrary[String])) {
         rdd =&amp;gt; None === RDDComparisons.compare(WordCounter.count(rdd), WordCounter.count(rdd))
       }
     check(stableProperty)
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, &lt;code&gt;RddGenerator.genRDD[String]&lt;/code&gt; will generate RDDs on top of random Strings.&lt;/p&gt;

&lt;p&gt;We declare the property to have the same count result when executing twice the method.&lt;/p&gt;

&lt;p&gt;We then test the property with the ScalaCheck method.&lt;/p&gt;

&lt;p&gt;While not very relevant for the wordcount example, it allows to test your job logic against randomly generated data as input and therefore test the reliability of your code.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this article, we have seen how it is possible to refactor and test a Spark job. Testing your jobs will allow faster feedback when implementing them and you can even practice TDD.&lt;/p&gt;

&lt;p&gt;The next step would be to run the tests not only on a local cluster, but on a “production-like” cluster with more data on your continuous integration server. Simply override the &lt;code&gt;setMaster()&lt;/code&gt; value when configuring the &lt;code&gt;SparkContext&lt;/code&gt; to redirect to your test cluster.&lt;/p&gt;

&lt;p&gt;Finally, I definitely recommend you watch Holden Karau’s session on testing Spark recorded at the last Spark Summit (&lt;a href=&#34;https://www.youtube.com/watch?v=rOQEiTXNS0g&#34;&gt;video&lt;/a&gt;, &lt;a href=&#34;http://www.slideshare.net/SparkSummit/beyond-parallelize-and-collect-by-holden-karau&#34;&gt;slides&lt;/a&gt;).
You can find the code for these examples &lt;a href=&#34;https://github.com/raphaelbrugier/spark-testing-example&#34;&gt;on Github&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Retour sur QCon London 2012</title>
      <link>http://www.raphael-brugier.com/blog/retour-sur-qcon-london-2012/</link>
      <pubDate>Sun, 01 Apr 2012 18:58:03 +0000</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/retour-sur-qcon-london-2012/</guid>
      <description>&lt;p&gt;J&amp;rsquo;ai eu l&amp;rsquo;occasion cet année d&amp;rsquo;être envoyé par ma société, Objet Direct, assister aux 3 jours de la conférence QCon à Londres. Une excellente expérience, qui m&amp;rsquo;a permise de voir des présentations très variées aussi bien techniques que méthodologiques. Ça fait du bien de sortir de la mission pour aller voir ce qui se fait ailleurs et ça permet de revenir avec pleins d&amp;rsquo;idées de nouvelles et de motivation.&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;espère pouvoir appliquer toutes les bonnes pratiques que j&amp;rsquo;ai appris là bas prochainement.&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;ai écrit deux articles pour le blog d&amp;rsquo;Objet Direct :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Une synthèse succincte des 3 jours : &lt;a href=&#34;http://blog.objetdirect.com/divers/qcon-london-2012&#34;&gt;QCon London 2012&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Un retour plus détaillé sur une présentation que j&amp;rsquo;ai particulièrement aimé sur GitHub : &amp;ldquo;&lt;a href=&#34;http://blog.objetdirect.com/divers/qcon-2012-how-github-works&#34;&gt;How GitHub Works&lt;/a&gt;&amp;ldquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bonne lecture !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wordpress login form with GWT and UiBinder</title>
      <link>http://www.raphael-brugier.com/blog/wordpress-login-form-with-gwt-and-uibinder/</link>
      <pubDate>Sun, 16 Jan 2011 16:40:14 +0000</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/wordpress-login-form-with-gwt-and-uibinder/</guid>
      <description>&lt;p&gt;Following my previous post, I have decided to rewrite the example of the Wordpress login form using only UiBinder and the ClientBundle/Css features that comes with GWT. This example demonstrate how you can use only htmlPanel and UiBinder to build a perfect pixel Ui just with hmtl/css and no gwt panel.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&#34;http://www.raphael-brugier.com/posts/wpLogin/WpLogin.html&#34;&gt;see the result there.&lt;/a&gt; Or you can &lt;a href=&#34;http://www.raphael-brugier.com/posts/wpLogin/wpLogin.zip&#34;&gt;download and run the eclipse project from there&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To start I&amp;rsquo;ve just copied the html from my wordpress login page into the htmlPanel. Then I&amp;rsquo;ve renamed all the &amp;ldquo;id&amp;rdquo; on the divs into class, because gwt will only compile the css declared in the UiBinder into class css. I&amp;rsquo;ve replaced the &amp;lt;form&amp;gt; by a &amp;lt;div&amp;gt;. I&amp;rsquo;ve added some more styles and the image directly in the UiBinder, so GWT can compress and obfuscate it. In the application.css I&amp;rsquo;ve just added two styles for the body.&lt;/p&gt;

&lt;p&gt;The main file that you want to see is WpForm.ui.xml :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE ui:UiBinder SYSTEM &amp;quot;http://dl.google.com/gwt/DTD/xhtml.ent&amp;quot;&amp;gt;
&amp;lt;ui:UiBinder xmlns:ui=&#39;urn:ui:com.google.gwt.uibinder&#39;
	xmlns:g=&#39;urn:import:com.google.gwt.user.client.ui&#39;&amp;gt;

	&amp;lt;ui:image field=&#39;logo&#39; src=&#39;logo-login.gif&#39; /&amp;gt;

	&amp;lt;ui:style&amp;gt;
		.form {
			margin-left: 8px;
			padding: 16px 16px 40px 16px;
			font-weight: normal;
			-moz-border-radius: 11px;
			-khtml-border-radius: 11px;
			-webkit-border-radius: 11px;
			border-radius: 5px;
			background: #fff;
			border: 1px solid #e5e5e5;
			-moz-box-shadow: rgba(200, 200, 200, 1) 0 4px 18px;
			-webkit-box-shadow: rgba(200, 200, 200, 1) 0 4px 18px;
			-khtml-box-shadow: rgba(200, 200, 200, 1) 0 4px 18px;
			box-shadow: rgba(200, 200, 200, 1) 0 4px 18px;
			font: 11px &amp;quot;Lucida Grande&amp;quot;, Verdana, Arial, &amp;quot;Bitstream Vera Sans&amp;quot;,
				sans-serif;
		}
		
		.form .forgetmenot {
			font-weight: normal;
			float: left;
			margin-bottom: 0;
		}
		
		.button-primary {
			background: #2379a1;
			color: #ffffff;
			font-family: &amp;quot;Lucida Grande&amp;quot;, Verdana, Arial, &amp;quot;Bitstream Vera Sans&amp;quot;,
				sans-serif;
			font-weight: bold;
			text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.3);
			padding: 3px 10px;
			border: none;
			font-size: 12px;
			border-width: 1px;
			border-style: solid;
			-moz-border-radius: 11px;
			-khtml-border-radius: 11px;
			-webkit-border-radius: 11px;
			border-radius: 11px;
			cursor: pointer;
			text-decoration: none;
			margin-top: -3px;
		}
		
		.login .form p {
			margin-bottom: 0px;
		}
		
		@external gwt-Label;
		.login .gwt-Label {
			color: #777;
			font-size: 13px;
		}
		
		.form .forgetmenot .gwt-Label {
			font-size: 11px;
			line-height: 19px;
			color: #777;
			float: right;
			margin-left: 5px;
		}
		
		.form .submit {
			float: right;
		}
		
		.form p {
			margin-bottom: 24px;
		}
		
		@sprite .login h1 a {
			gwt-image: &#39;logo&#39;;
			width: 326px;
			height: 67px;
			text-indent: -9999px;
			overflow: hidden;
			padding-bottom: 15px;
			display: block;
		}
		
		.nav {
			text-shadow: rgba(255, 255, 255, 1) 0 1px 0;
			margin: 0 0 0 8px;
			padding: 16px;
		}
		
		.nav a {
			color: #21759B;
		}
		
		.input {
			font-size: 24px;
			width: 97%;
			padding: 3px;
			margin-top: 2px;
			margin-right: 6px;
			margin-bottom: 16px;
			border: 1px solid #e5e5e5;
			background: #fbfbfb;
			color: #555;
		}
		
		.backtoblog {
			position: absolute;
			top: 0;
			left: 0;
			border-bottom: #c6c6c6 1px solid;
			background: #d9d9d9;
			background: -moz-linear-gradient(bottom, #d7d7d7, #e4e4e4);
			background: -webkit-gradient(linear, left bottom, left top, from(#d7d7d7),
				to(#e4e4e4) );
			height: 30px;
			width: 100%;
		}
		
		.backtoblog a {
			text-decoration: none;
			display: block;
			padding: 8px 0 0 15px;
			color: #464646;
		}
		
		.login {
			width: 320px;
			margin: 7em auto;
			padding-top: 30px;
		}
	&amp;lt;/ui:style&amp;gt;

	&amp;lt;g:HTMLPanel&amp;gt;
		&amp;lt;div class=&amp;quot;{style.login}&amp;quot;&amp;gt;
			&amp;lt;h1&amp;gt;
				&amp;lt;a title=&amp;quot;Propulsé par WordPress&amp;quot; href=&amp;quot;http://wordpress.org/&amp;quot;&amp;gt;Le blog de Raph&amp;lt;/a&amp;gt;
			&amp;lt;/h1&amp;gt;
			&amp;lt;div class=&amp;quot;{style.form}&amp;quot;&amp;gt;
				&amp;lt;p&amp;gt;
					&amp;lt;g:Label&amp;gt;Login&amp;lt;/g:Label&amp;gt;
					&amp;lt;br /&amp;gt;
					&amp;lt;g:TextBox styleName=&amp;quot;{style.input}&amp;quot; /&amp;gt;
				&amp;lt;/p&amp;gt;
				&amp;lt;p&amp;gt;
					&amp;lt;g:Label&amp;gt;Password&amp;lt;/g:Label&amp;gt;
					&amp;lt;br /&amp;gt;
					&amp;lt;g:TextBox styleName=&amp;quot;{style.input}&amp;quot; /&amp;gt;
				&amp;lt;/p&amp;gt;
				&amp;lt;p class=&amp;quot;{style.forgetmenot}&amp;quot;&amp;gt;
					&amp;lt;g:CheckBox&amp;gt;&amp;lt;/g:CheckBox&amp;gt;
					&amp;lt;g:Label&amp;gt; Se souvenir de moi&amp;lt;/g:Label&amp;gt;
				&amp;lt;/p&amp;gt;
				&amp;lt;p class=&amp;quot;{style.submit}&amp;quot;&amp;gt;
					&amp;lt;g:Button styleName=&amp;quot;{style.button-primary}&amp;quot;&amp;gt;Connect&amp;lt;/g:Button&amp;gt;

				&amp;lt;/p&amp;gt;
			&amp;lt;/div&amp;gt;

			&amp;lt;p class=&amp;quot;{style.nav}&amp;quot;&amp;gt;
				&amp;lt;a title=&amp;quot;Récupération de mot de passe&amp;quot;
					href=&amp;quot;http://{{ site.baseurl }}&amp;quot;&amp;gt;Mot de passe oublié ?&amp;lt;/a&amp;gt;
			&amp;lt;/p&amp;gt;
		&amp;lt;/div&amp;gt;
		&amp;lt;p class=&amp;quot;{style.backtoblog}&amp;quot;&amp;gt;
			&amp;lt;a title=&amp;quot;Êtes-vous perdu(e)?&amp;quot; href=&amp;quot;{{ site.baseurl }}&amp;quot;&amp;gt;← Retour sur Le blog de
				Raph&amp;lt;/a&amp;gt;
		&amp;lt;/p&amp;gt;
	&amp;lt;/g:HTMLPanel&amp;gt;
&amp;lt;/ui:UiBinder&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WpLogin.css  :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    * {
        margin: 0;
        padding: 0;
    }
    
    body {
        font: 11px &amp;quot;Lucida Grande&amp;quot;, Verdana, Arial, &amp;quot;Bitstream Vera Sans&amp;quot;,
            sans-serif !important;
            background-color: #f9f9f9 !important;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s all !  So now, please don&amp;rsquo;t follow the advices of writing all your html in a big static String and learn how to use the tool !&lt;/p&gt;

&lt;p&gt;Happy coding !&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.raphael-brugier.com/posts/wpLogin/WpLogin.html&#34;&gt;Result page&lt;/a&gt; Or you can &lt;a href=&#34;http://www.raphael-brugier.com/posts/wpLogin/wpLogin.zip&#34;&gt;Download the eclipse project&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GWT and HTML under control</title>
      <link>http://www.raphael-brugier.com/blog/gwt-and-html-under-control/</link>
      <pubDate>Sun, 16 Jan 2011 16:34:48 +0000</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/gwt-and-html-under-control/</guid>
      <description>&lt;p&gt;In the past weeks I&amp;rsquo;ve seen two articles about making clean design with GWT. That was really interesting, but something still stugling me a lot. Both authors agreed not to use  layout widgets provided by GWT to build UI neither UiBinder but use instead a big ugly static String to store an HTML code/&lt;/p&gt;

&lt;p&gt;Take a closer look at those two articles and come back later to find out a better way to improve your design based on GWT.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i-proving.ca/space/Technologies/GWT/Lightweight+GWT+layouts&#34;&gt;Lightweight GWT layouts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.zackgrossbart.com/hackito/tags-first-gwt/&#34;&gt;Tags first GWT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The purpose is to write a clean HTML with the least number of tags and have that HTML code under control with only CSS. I do agree that using the old GWT layout system is a really mess producing a lot of tables and ugly code.&lt;/p&gt;

&lt;p&gt;However, since GWT 2.0, Google brought us &lt;a href=&#34;http://www.google.com/events/io/2010/sessions/gwt-ui-overhaul.html&#34;&gt;a better layout system&lt;/a&gt; with the widgets positionned using only div and css. With this system you can normally reach a clean design without generating table tags and a lof HTML mess.&lt;/p&gt;

&lt;p&gt;But since the web is all about simple html and css, I agree with Zack Grossbart that you need to have a perfect control of your UI with the least html tags and just css.&lt;/p&gt;

&lt;p&gt;But with the version 2.0 GWT also introduces a wonderful feature called UiBinder. With UiBinder you can describe in a declarative way your design separated from your logic. You can especially use the HtmlPanel panel to mix up classic HTML/CSS and GWT widgets. This is exactly what they wanted to do ! Use classic HTML and CSS to describe the UI and GWT only for the control. By using UiBinder they can take advantage of a powerfull tool having a built-in feature to bind GWT widgets from the xml to the Java and many mores.&lt;/p&gt;

&lt;p&gt;Putting your html within a static String is not really that clean and maintainable. So please, for God sake, do not do it ! &lt;a href=&#34;http://code.google.com/intl/fr/webtoolkit/doc/latest/DevGuideUiBinder.html&#34;&gt;Learn the API&lt;/a&gt; and &lt;a href=&#34;http://www.google.com/events/io/2010/sessions.html#GWT&#34;&gt;follow the best practices&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[update] I&amp;rsquo;ve now coded a rewrite of the wordpress login page example just by using UiBinder and the HtmlPanel, see &lt;a href=&#34;http://www.raphael-brugier.com/blog/wordpress-login-form-with-gwt-and-uibinder/&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How-To change the style of your GWT 2.1 ValuePicker ?</title>
      <link>http://www.raphael-brugier.com/blog/how-to-change-the-style-of-your-gwt-2-1-valuepicker/</link>
      <pubDate>Mon, 20 Dec 2010 21:59:06 +0000</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/how-to-change-the-style-of-your-gwt-2-1-valuepicker/</guid>
      <description>&lt;p&gt;This class demonstrate how-to change the style of the GWT 2.1 ValuePicker.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Main extends Composite {
	
	private static class DefaultCell&amp;lt;T&amp;gt; extends AbstractCell&amp;lt;T&amp;gt; {
	    private final Renderer&amp;lt;T&amp;gt; renderer;

	    DefaultCell(Renderer&amp;lt;T&amp;gt; renderer) {
	      this.renderer = renderer;
	    }

	    @Override
	    public void render(Context context, T value, SafeHtmlBuilder sb) {
	      sb.appendEscaped(renderer.render(value));
	    }
	  }
	
	public interface MyResources extends CellList.Resources {
	    @Source(&amp;quot;myStyle.css&amp;quot;)
	    Style cellListStyle();
	}
	
	Renderer&amp;lt;String&amp;gt; renderer = new AbstractRenderer&amp;lt;String&amp;gt;() {
		@Override
		public String render(String object) {
			return object;
		}
	};
	
	private static MyResources RESOURCES = GWT.create(MyResources.class);

	private static final Binder binder = GWT.create(Binder.class);
	
	@UiField FlowPanel panel;

	interface Binder extends UiBinder&amp;lt;Widget, Main&amp;gt; {
	}

	public Main() {
		initWidget(binder.createAndBindUi(this));

		CellList&amp;lt;String&amp;gt; cellList = new CellList&amp;lt;String&amp;gt;(new DefaultCell&amp;lt;String&amp;gt;(renderer), RESOURCES);

		ValuePicker&amp;lt;String&amp;gt; valueBox = new ValuePicker&amp;lt;String&amp;gt;(cellList);
		valueBox.setAcceptableValues(Arrays.asList(&amp;quot;HELLO&amp;quot;, &amp;quot;WORLD&amp;quot;));
		panel.add(valueBox);
	}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Gwt – Surcharger les styles par défauts</title>
      <link>http://www.raphael-brugier.com/blog/gwt-surcharger-les-styles-par-defauts/</link>
      <pubDate>Sat, 11 Sep 2010 12:55:17 +0000</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/gwt-surcharger-les-styles-par-defauts/</guid>
      <description>&lt;p&gt;La version 2.0 de Gwt à introduit l&amp;rsquo;interface CssResource qui permet de lier des classes css à des widgets Gwt en java. Cette interface permet de bénéficier d&amp;rsquo;optimisation à la compilation et de brouiller les noms des classes pour éviter les collisions. Elle enrichi aussi la syntaxe Css, par exemple en permettant de déclarer des constantes. Il est ainsi très facile de déclarer des feuilles Css qui joueront le rôle de feuille parent de laquelle hériterons les feuilles spécifiques à chaque partie de l&amp;rsquo;interface. Cela permet par exemple de créer très facilement plusieurs thèmes.&lt;/p&gt;

&lt;p&gt;Cependant, il n&amp;rsquo;est parfois pas aisé de surchargé les styles du thème par défaut. En effet, l&amp;rsquo;interface les styles déclarés avec CssResources sont injectés uniquement quand nécessaire, et parfois après ceux de la feuille de thème par défaut qui les surchargent donc. Pour pallier à ce problème, il existe une astuce c&amp;rsquo;est d&amp;rsquo;utiliser l&amp;rsquo;annotation @External&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface WidgetCss extends CssResource {
        public void myButtonStyle();
}

public interface WidgetResources extends ClientBundle {
        public WidgetResources INSTANCE = GWT.create(WidgetResources.class);

        WidgetCss css();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fichier css :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@External .gwt-Button
.myButtonStyle .gwt-Button{
    color: #424242;
    font-size: 13px;
    cursor: pointer;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Utilisation :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public MyWidget() {
    Button button = new Button(&amp;quot;click me !&amp;quot;);
    button.addStyleName(css().myButtonStyle());
}

/**
* @return Helper access to the css String;
*/
private WidgetResources css() {
    return WidgetResources.INSTANCE.css();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et voilà, la déclaration du thème par défaut gwt-button est maintenant surchargée par myButtonStyle.&lt;/p&gt;

&lt;p&gt;Le style ne sera pas surchargé par le thème par défaut, et il n&amp;rsquo;est pas nécessaire un moche hack avec par exemple &amp;ldquo;!important&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Bon gwt à tous !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google I/O 2010 – GWT’s UI overhaul</title>
      <link>http://www.raphael-brugier.com/blog/google-io-2010-gwts-ui-overhaul/</link>
      <pubDate>Thu, 15 Jul 2010 20:28:53 +0000</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/google-io-2010-gwts-ui-overhaul/</guid>
      <description>

&lt;p&gt;Le 19 et 20 mai 2010 avait lieu l&amp;rsquo;événement annuel de Google, le Google I/O à San Francisco. Près d&amp;rsquo;une centaine de présentations ont eu lieux et toutes étaient filmées ! Je débute donc une série de post pour résumer celles que je visionne, en particulier celles traitant de GWT et de Google App Engine.&lt;/p&gt;

&lt;h2 id=&#34;gwt-s-ui-overhaul&#34;&gt;GWT&amp;rsquo;S UI Overhaul&lt;/h2&gt;

&lt;h4 id=&#34;par-ray-rian-et-joel-webber&#34;&gt;Par Ray Rian et Joel  Webber.&lt;/h4&gt;

&lt;p&gt;Cette présentation  présente plus en détails les nouvelles façons de construire les  interfaces  avec la version 2.0 de GWT et introduit une partie de la  future 2.1. L’équipe de GWT nomme ces nouveautés UI overhaul.&lt;/p&gt;

&lt;p&gt;Elles sont  détaillées en 4 points :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UiBinder : La conception déclarative des  interfaces, qui permet de remplacer énormément de code java par un  fichier xml.&lt;/li&gt;
&lt;li&gt;ClientBundle : Permet de lier les ressources de l’application au code java, ainsi GWT réalise des optimisations.&lt;/li&gt;
&lt;li&gt;LayoutPanels : Présentation du nouveau système de rendu utilisant uniquement du html standard&lt;/li&gt;
&lt;li&gt;CellWidgets (2.1) : Les futurs widgets pour construire des tableaux ou des listes avec de très nombreuses données&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;uibinder&#34;&gt;UiBinder :&lt;/h3&gt;

&lt;p&gt;Le nouveau système de déclaration des interfaces avait été introduit avec Gwt 2.0, cette partie de la présentation rappelle seulement que UiBinder permet d&amp;rsquo;écrire beaucoup plus simplement les interfaces en supprimant le code inutile java. Pour l&amp;rsquo;utiliser dans mon projet, c&amp;rsquo;est un vrai bonheur !&lt;/p&gt;

&lt;p&gt;Par exemple, voici du code java :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    HorizontalPanel outer = new HorizontalPanel();
    VerticalPanel inner = new VerticalPanel();
    outer.setHorizontalAlignment(HorizontalPanel.ALIGN_RIGHT);
    inner.setHorizontalAlignment(HorizontalPanel.ALIGN_RIGHT);
    HorizontalPanel links = new HorizontalPanel();
    links.setSpacing(4);
    links.add(signOutLink);
    links.add(aboutLink);
    final Image logo = images.logo().createImage();
    outer.add(logo);
    outer.setCellHorizontalAlignment(logo, HorizontalPanel.ALIGN_LEFT);
    outer.add(inner);
    inner.add(new HTML(&amp;quot;**Welcome back, foo@example.com**&amp;quot;));
    inner.add(links);
    signOutLink.addClickHandler(this);
    aboutLink.addClickHandler(this);
    initWidget(outer);
    setStyleName(&amp;quot;mail-TopPanel&amp;quot;);
    links.setStyleName(&amp;quot;mail-TopPanelLinks&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et son équivalent UiBInder :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;g:htmlpanel&amp;gt;
    &amp;lt;div class=&amp;quot;{style.logo}&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;{style.statusDiv}&amp;quot;&amp;gt;
            &amp;lt;div&amp;gt;
                **Welcome back, foo@example.com**
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&amp;quot;{style.linksDiv}&amp;quot;&amp;gt;
                &amp;lt;g:anchor ui:field=&amp;quot;signOutLink&amp;quot;&amp;gt;Sign Out&amp;lt;/g:anchor&amp;gt;
                &amp;lt;g:anchor ui:field=&amp;quot;aboutLink&amp;quot;&amp;gt;About&amp;lt;/g:anchor&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;&amp;lt;/g:htmlpanel&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;client-bundle&#34;&gt;Client Bundle :&lt;/h3&gt;

&lt;p&gt;Une nouveauté au moins aussi important qu&amp;rsquo;UiBinder est le ClientBundle. L&amp;rsquo;interface ClientBundle permet de lier les  ressources de l’applications au code java. Ainsi GWT réalise des  optimisations. Par exemple les images peuvent être packagées et les  opérations de “sprites” directement réalisées.&lt;/p&gt;

&lt;p&gt;ClientBundle permet aussi de déclarer les propriétés css dans une interface et un fichier distinct qui seront packagé par Gwt. Cela permet là encore d&amp;rsquo;optimiser, d&amp;rsquo;obfusquer les noms css pour éviter la collision et aussi d&amp;rsquo;ajouter quelques propriétés Css, comme les expressions ou les constantes.&lt;/p&gt;

&lt;p&gt;De plus ClientBundle s&amp;rsquo;intègre parfaitement avec Uibinder et il est possible de déclarer une interface Css dans le fichier java dont l&amp;rsquo;implémentation est réalisée dans le fichier UiBinder.&lt;/p&gt;

&lt;h3 id=&#34;internationalisation-i18n&#34;&gt;Internationalisation (I18n)&lt;/h3&gt;

&lt;p&gt;UiBinder supporte désormais mieux l&amp;rsquo;internationalisation des widgets. Grâce à la balise &amp;lt;ui:msg&amp;gt;, il n&amp;rsquo;est plus nécessaire de déclarer une interface Message. Un gros travail a été effectué sur la documentation pour refléter tout ces changements, cf la &lt;a href=&#34;http://code.google.com/webtoolkit/doc/latest/DevGuideUiBinderI18n.html&#34;&gt;documentation I18n&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;layout-panels&#34;&gt;Layout Panels&lt;/h3&gt;

&lt;p&gt;L’ancien système de  layout était, selon les dire même de Ray Cromwell, un cauchemar. Le  système était statique et construit à base de table imbriquées ! De plus cela ne  fonctionnait pas en “standards mode“ seulement en “quirks mode”. Le &amp;ldquo;standards mode&amp;rdquo; étant le futur du web, html5, il devenait critique de pouvoir l&amp;rsquo;utiliser et de se passer du vieux positionnement à base de tables.&lt;/p&gt;

&lt;p&gt;L’alternative proposée  par les frameworks pour Gwt qui encapsulent des librairies Javascript,  type Gwt-ext, est souvent d’implémenter un nouveau système de layout. Ce  système totalement en Javascript rend souvent l’application très lente.&lt;/p&gt;

&lt;p&gt;La solution retenue  pour le nouveau système est d’utiliser des bloc div en position absolu  et du css. En effet, les propriétés Css : top left right bottom width  height permettent de positionner très exactement un bloc à l’intérieur  d’un autre.&lt;/p&gt;

&lt;p&gt;Voici par exemple le code UiBinder et son résultat html/css&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;     &amp;lt;g:docklayoutpanel unit=&amp;quot;EM&amp;quot;&amp;gt;
         &amp;lt;g:north size=&amp;quot;15&amp;quot;&amp;gt;
             &amp;lt;g:flowpanel&amp;gt;
                 &amp;lt;g:label&amp;gt;Header&amp;lt;/g:label&amp;gt;
             &amp;lt;/g:flowpanel&amp;gt;
         &amp;lt;/g:north&amp;gt;

         &amp;lt;g:west size=&amp;quot;15&amp;quot;&amp;gt;
             &amp;lt;g:flowpanel&amp;gt;
                 &amp;lt;g:button&amp;gt;Page 1&amp;lt;/g:button&amp;gt;
                 &amp;lt;g:button&amp;gt;Page 2&amp;lt;/g:button&amp;gt;
             &amp;lt;/g:flowpanel&amp;gt;
         &amp;lt;/g:west&amp;gt;

         &amp;lt;g:center&amp;gt;
             &amp;lt;g:htmlpanel&amp;gt;some html&amp;lt;/g:htmlpanel&amp;gt;
         &amp;lt;/g:center&amp;gt;
     &amp;lt;/g:docklayoutpanel&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div style=&amp;quot;position: absolute; left: 0px; top: 0px; right: 0px; bottom: 0px;&amp;quot;&amp;gt;
    &amp;lt;div style=&amp;quot;position: absolute; overflow: hidden; left: 0em; top: 0em; right: 0em; height: 15em;&amp;quot;&amp;gt;
        &amp;lt;div style=&amp;quot;position: absolute; left: 0px; top: 0px; right: 0px; bottom: 0px;&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;gwt-Label&amp;quot;&amp;gt;Header&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div style=&amp;quot;position: absolute; overflow: hidden; left: 0em; top: 15em; bottom: 0em; width: 15em;&amp;quot;&amp;gt;
        &amp;lt;div style=&amp;quot;position: absolute; left: 0px; top: 0px; right: 0px; bottom: 0px;&amp;quot;&amp;gt;
            &amp;lt;button type=&amp;quot;button&amp;quot; tabindex=&amp;quot;0&amp;quot; class=&amp;quot;Gohuy86A&amp;quot;&amp;gt;Page 1&amp;lt;/button&amp;gt;
            &amp;lt;button type=&amp;quot;button&amp;quot; tabindex=&amp;quot;0&amp;quot; class=&amp;quot;gwt-Button&amp;quot;&amp;gt;Page 2&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div style=&amp;quot;position: absolute; overflow: hidden; left: 15em; top: 15em; right: 0em; bottom: 0em;&amp;quot;&amp;gt;
        &amp;lt;div style=&amp;quot;position: absolute; left: 0px; top: 0px; right: 0px; bottom: 0px;&amp;quot;&amp;gt;some html&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On voit bien que les panels qui composent le dockLayout sont placés de façons statiques avec les propriétés css qui s&amp;rsquo;appliquent à un placement absolu.&lt;/p&gt;

&lt;h5 id=&#34;en-résumé&#34;&gt;En résumé&lt;/h5&gt;

&lt;p&gt;Ce que le nouveau système de layout permet :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Définir très exactement la structrure de l’interface de  l’application. Pour les widgets interne, on pourra continuer à les  définir en pur html/css classique.&lt;/li&gt;
&lt;li&gt;Travailler en “standard mode“&lt;/li&gt;
&lt;li&gt;Fonctionner sous IE6, (oui même le standards mode !)&lt;/li&gt;
&lt;li&gt;Supporter des animations. Par exemple en effet de transition entre les changements de panels.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Attention! Le nouveau système de layout n&amp;rsquo;est pas :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Un remplacement total  pour le système placement HTML. Si vous utilisez déjà avec succès des  placements en HTML/CSS alors continuez avec !&lt;/li&gt;
&lt;li&gt;Un système de layout  comme Swing/swt avec des “prefered size”. Ici le  système est plus simple  et les panels ne peuvent pas se redimensionner à  partir des tailles  “préférées“, c’est à dire négociée avec les panels  du même niveau.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cellwidgets-2-1&#34;&gt;CellWidgets (2.1)&lt;/h3&gt;

&lt;p&gt;La prochaine version de GWT, la 2.1, introduira entre autres de nouveaux widgets pour afficher des listes/tableaux comportements de nombreuses données. La particularité de ces widgets est de favoriser le html pur pour accélérer le rendu. En effet, l&amp;rsquo;utilisation des widgets classiques pour afficher de grandes liste entrainait un surcout, à cause du grand nombre de fonction javascript que ces widgets possèdent. Cela menait souvent à diminuer la fluidité de la page dans le navigateur.&lt;/p&gt;

&lt;p&gt;Les cellWidget sont un version simplifié du model MVC. La vue étend la classe Cell et possède une méthode onRender() qui retourne le html pour une cellule donnée en fonction du model qu&amp;rsquo;elle possède.&lt;/p&gt;

&lt;p&gt;Il existe déjà une application de démonstrations qui tire parti de ces nouveaux widgets :&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gwt-bikeshed.appspot.com/Expenses.html&#34;&gt;Expenses application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.google.com/url?sa=D&amp;amp;amp;q=http%3A%2F%2Fcode.google.com%2Fp%2Fgoogle-web-toolkit%2Fsource%2Fbrowse%2Fbranches%2F2.1%2Fbikeshed%2F%23bikeshed%2Fsrc%2Fcom%2Fgoogle%2Fgwt%2Fsample%2Fexpenses%2Fgwt&#34;&gt;Le code source&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion :&lt;/h3&gt;

&lt;p&gt;Ma conclusion personnelle sur cette conférence est qu&amp;rsquo;il ne suffit pas d&amp;rsquo;utiliser GWT 2.0 pour compiler pour profiter de toute sa puissance. Comme toute toolbox, il faut prendre le temps de faire le tour de l&amp;rsquo;api pour la maîtriser.&lt;/p&gt;

&lt;h3 id=&#34;sources&#34;&gt;Sources :&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://code.google.com/intl/fr/events/io/2010/sessions/gwt-ui-overhaul.html&#34;&gt;Page de la conférence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=g2XclEOJdIc&amp;amp;feature=PlayList&amp;amp;p=F01F46882D8A90AF&amp;amp;playnext_from=PL&amp;amp;index=4&#34;&gt;Vidéos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dl.google.com/googleio/2010/gwt-ui-overhaul.pdf&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://code.google.com/intl/fr/events/io/2010/sessions/gwt-ui-overhaul.html&#34;&gt;Wave de discussion sur la conférence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://wave.google.com/wave/waveref/googlewave.com/w+zqS7G7ZkBwa&#34;&gt;Live Wave (notes prises par un Googler pendant la conférence)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GTAC 2009 – Lessons learned from testing GWT applications</title>
      <link>http://www.raphael-brugier.com/blog/gtac-2009-lessons-learned-from-testing-gwt-applications/</link>
      <pubDate>Sun, 30 May 2010 16:00:20 +0000</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/gtac-2009-lessons-learned-from-testing-gwt-applications/</guid>
      <description>

&lt;p&gt;Les 21 et 22 octobre 2009 avait lieux à Zurich la conférence annuelle de Google sur les test automatisées.&lt;/p&gt;

&lt;p&gt;Parmi toutes les conférences proposées, une m&amp;rsquo;intéressait particulièrement puisqu&amp;rsquo;elle concerne les test d&amp;rsquo;applications réalisées en Gwt.&lt;/p&gt;

&lt;p&gt;Voici donc la vidéo de la présentation ainsi que les slides et quelques notes que j&amp;rsquo;ai pris en la visionnant.&lt;/p&gt;

&lt;p&gt;&lt;object classid=&#34;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&#34; width=&#34;480&#34; height=&#34;385&#34; codebase=&#34;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&#34;&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34; /&gt;&lt;param name=&#34;allowscriptaccess&#34; value=&#34;always&#34; /&gt;&lt;param name=&#34;src&#34; value=&#34;http://www.youtube.com/v/TFfEjo3oFfM&amp;amp;hl=fr_FR&amp;amp;fs=1&amp;amp;&#34; /&gt;&lt;param name=&#34;allowfullscreen&#34; value=&#34;true&#34; /&gt;&lt;embed type=&#34;application/x-shockwave-flash&#34; width=&#34;480&#34; height=&#34;385&#34; src=&#34;http://www.youtube.com/v/TFfEjo3oFfM&amp;amp;hl=fr_FR&amp;amp;fs=1&amp;amp;&#34; allowscriptaccess=&#34;always&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;

&lt;h2 id=&#34;comment-tester-les-applications-gwt-slide-8&#34;&gt;Comment tester les applications Gwt ? (slide 8 )&lt;/h2&gt;

&lt;h3 id=&#34;avec-selenium&#34;&gt;Avec selenium :&lt;/h3&gt;

&lt;p&gt;Selenium va simuler au plus près l&amp;rsquo;interaction qu&amp;rsquo;a un vrai utilisateur avec le navigateur puisqu&amp;rsquo;il démarre un vrai navigateur et réalise directement les opérations de test sur celui-ci. Cependant cette approche est très coûteuse en temps d&amp;rsquo;exécution et surtout plus difficile pour maintenir les tests et plus dure à débugguer.&lt;/p&gt;

&lt;h3 id=&#34;avec-gwttestcase&#34;&gt;Avec GwtTestCase :&lt;/h3&gt;

&lt;p&gt;Cet outil, fourni avec Gwt ,démarre lui aussi un navigateur embarqué pour exécuter les tests. Cependant ici, on parle de &amp;ldquo;crossCompilation&amp;rdquo; puisque le code java est compilée en JS à la volée pour être exécuté par le navigateur embarqué. De la même façon que le development mode. Cet outil est plus rapide que selenium et plus facile à maintenir puisque les tests sont écrits en Java et lancés de la même façons que des tests Junit. Cependant, le fait que le code final testé est du javascript (après compilation à la volée donc) rend plus difficile le débuggage.&lt;/p&gt;

&lt;h3 id=&#34;avec-junit&#34;&gt;Avec Junit :&lt;/h3&gt;

&lt;p&gt;Ici on utilise classiquement Junit pour simuler les interactions utilisateurs. C&amp;rsquo;est le plus facile à maintenir et débugguer, puisque le mieux maîtriser et outillé. Cependant c&amp;rsquo;est aussi évidemment le moins réaliste puisqu&amp;rsquo;aucun navigateur n&amp;rsquo;est démarré pour tester le comportement réel du code compilé.&lt;/p&gt;

&lt;h2 id=&#34;les-problèmes-rencontrés-pendant-les-tests&#34;&gt;Les problèmes rencontrés pendant les tests&lt;/h2&gt;

&lt;h3 id=&#34;problème-1-tester-les-appels-asynchrones-slides-9-à-13&#34;&gt;Problème 1 : tester les appels asynchrones (slides 9 à 13) :&lt;/h3&gt;

&lt;p&gt;Les appels aysnchrones sont la nature même des applications Ajax. C&amp;rsquo;est le A de Ajax ! Avec ces appels, il n&amp;rsquo;y a aucune garantie sur le temps nécessaire pour qu&amp;rsquo;ils réussissent, ni même d&amp;rsquo;ailleurs s&amp;rsquo;ils réussiront un jour (les pauvres :s). Ce sont ces mêmes appels que vous utilisez avec le mécanisme RPC de Gwt :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;myservice.call(new AsyncCallBack() {
    public void onSuccess(QueryResponse response) {
        searchButton.setEnabled(true);

        if(response.count() == 0 {
            resultPanel.add(new Label(&amp;quot;no team found&amp;quot;);
        } else {
            //ajouter la réponse dans un panel, etc
        }
    }

    public void onFailure(Throwable ex) {
        //traiter l&#39;échec de l&#39;appel asynchrone
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MyService myService = mock(MyService.class);
QueryHandler client = new QueryHandler(mySerice);
client.performQuery(&amp;quot;test query&amp;quot;);
ArgumentCaptor&amp;amp;lt;Asyncallback&amp;amp;gt; captor = ArgumentCaptor.forClass(AsynCallback.class);
verify(myService).call(&amp;quot;test query&amp;quot;, captor.capture);
AsyncCallback&amp;amp;lt;QueryResponse&amp;amp;gt; callback = captor.getValue;

//Réel appel à onSuccess

QueryResponse fakeResponse = createFakeResponseForTesting();
callback.onSuccess(fakeResponse);

//Tester les résultats.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ce que l&amp;rsquo;on veut tester ici, c&amp;rsquo;est le résultat d&amp;rsquo;un appel à la méthode onSuccess avec le résultat d&amp;rsquo;une réponse de callBack.&lt;/p&gt;

&lt;p&gt;Ce qu&amp;rsquo;il faut bien voir c&amp;rsquo;est que toute la première partie du test ( mocker le service, mocker le callback, récupérer le callback de réponse), tout ça n&amp;rsquo;est fait que pour pouvoir appeler la méthode onSuccess du callBack ! ça fait donc beaucoup de plomberie pour tester une simple méthode !&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;astuce consiste à toujours remplacer le traitement qu&amp;rsquo;on ferait dans la méthode onSuccess par un appel à une autre méthode : doTraiterReponse(response);&lt;/p&gt;

&lt;p&gt;Cette méthode, fera tout le travail de traitement nécessaire. Ainsi il est plus simple de la tester :&lt;/p&gt;

&lt;p&gt;QueryHandler.java :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;myservice.call(new AsyncCallBack() {
    public void  onSuccess(QueryResponse response) {
        doTraiterReponse(response);
    }

    public  void onFailure(Throwable ex) {
        //traiter l&#39;échec de l&#39;appel  asynchrone
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;QueryHandler client = new QueryHandler(null) // Plus besoin de service !

QueryResponse fakeResponse = createFakeResponseForTesting();
client.doTraiterReponse(fakeresponse);

//Tester les résultats
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;problème-2-opérations-directe-sur-le-dom-slides-14-à-16&#34;&gt;Problème 2 : Opérations directe sur le DOM (slides 14 à 16)&lt;/h3&gt;

&lt;p&gt;Gwt permet de manipuler directement le DOM du document HTML :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String selectedLanguage = DOM.getElementByID(&amp;quot;languageSelection&amp;quot;).getPropertyString(&amp;quot;value&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ici, la solution est simple :APPRENDRE L&amp;rsquo;API !&lt;/p&gt;

&lt;p&gt;En utilisant uniquement les widgets gwt qui encapsule tout la manipulation du DOM, il est plus facile de tester unitairement ces Widgets.&lt;/p&gt;

&lt;p&gt;Ici on aurait utilisé une ListBox dans une panel.&lt;/p&gt;

&lt;h3 id=&#34;problème-3-mixer-java-et-javascript-slides-17-à-19&#34;&gt;Problème 3 : mixer Java et Javascript (slides 17 à 19)&lt;/h3&gt;

&lt;p&gt;Gwt propose un mécanisme pour encapsuler du code javascript dans des méthodes Java :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private native void showPlayer /*{
    $wnd.showPlayer;
}*/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ici, le mélange javascript/java ne permet de tester unitairement avec Junit les méthodes natives.&lt;/p&gt;

&lt;p&gt;La solution la plus simple reste d&amp;rsquo;isoler ces méthodes dans des classes dédiées et de les mocker quand elles sont utilisées.&lt;/p&gt;

&lt;p&gt;Pour tester ces méthodes, il faudra faire appels à GwtTestCase qui lui aura la capacité d&amp;rsquo;exécuter du code mixant java (compilée à la volée en javascript) et appels natifs au code javascript.&lt;/p&gt;

&lt;h3 id=&#34;problème-4-static-global-access-slides-20-à-27&#34;&gt;Problème 4 : static/global access (slides 20 à 27)&lt;/h3&gt;

&lt;p&gt;Les accès statics ou aux variables globales sont difficiles à suivre, et donc à débugguer.&lt;/p&gt;

&lt;p&gt;Pour isoler les dépendances de la classe à tester, on mettra en oeuvre l&amp;rsquo;injection de dépendance pour mocker les classes utilisées dans les tests.&lt;/p&gt;

&lt;p&gt;Pour rappel, il existe un framework d&amp;rsquo;injection de dépendances développé par Google pour Gwt : &lt;a href=&#34;http://code.google.com/p/google-gin/&#34;&gt;Gin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Il est basé sur Guice, le framework d&amp;rsquo;injection de Google.&lt;/p&gt;

&lt;h3 id=&#34;problème-5-séparation-des-responsabilités-slides-28-à-32&#34;&gt;Problème 5 : Séparation des responsabilités (slides 28 à 32)&lt;/h3&gt;

&lt;p&gt;Ici le pattern MVP (Model View Presenter) est mis en avant par rapport au classique MVC.&lt;/p&gt;

&lt;p&gt;Dans MVC, la vue est écouteur du modèle. Le contrôleur modifie le modèle et la vue écoute ces changements. La vue se met à jour en écoutant tout changement du modèle.&lt;/p&gt;

&lt;p&gt;Cette mise à jour entraine forcément qu&amp;rsquo;une partie de la logique du traitement du modèle se retrouve dans la vue, et donc une mauvaise séparation des responsabilité.&lt;/p&gt;

&lt;p&gt;Pour parer à cela, le pattern MVP à été introduit. L&amp;rsquo;article fondateur du pattern MVP est celui de &lt;a href=&#34;http://martinfowler.com/eaaDev/ModelViewPresenter.html&#34;&gt;M. Fowler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dans MVP, toute la logique est concentrée dans le Presenter. Le Modèle et la Vue informe le Presenter des changements par un système d&amp;rsquo;évènements. Le Presenter réagit aux évènements et reflète les changements sur le modèle et la vue. Le plus souvent la vue sera d&amp;rsquo;ailleurs une vue passive.&lt;/p&gt;

&lt;p&gt;Le slide 32 est particulièrement intéressant, puisque c&amp;rsquo;est lui qui ma donné le déclic pour comprendre toute la logique de MVP.&lt;/p&gt;

&lt;p&gt;Avec un Presenter isolé de cette façons, il est facile de le tester unitairement (en pseudo code &amp;ldquo;java&amp;rdquo; pour plus de clarté) :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Presenter {
    Vue vue;
    Model model;

    public Presenter(Vue vue, Model model) {
        this.model = model;
        this.vue = vue;
        attachHandler();
    }

    private void attachHandler() {
        vue.getButton.addClickHandler(new ClickHandler() {
            public void onClick(Event e) {
                model.save(vue.getData());
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//With
Model mockModel = mock(Model.class);
Vue mockVue = mock(Vue.class);
Presenter presenter = new Presenter(mockVue, mockModel);

//Given
Data testData = createFakeData();
vue.setData(testData);

// Assert
verify(mockModel).save(testData);
vue.getButton.click();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Voilà pour les quelques notes sur cette conférence, il y&amp;rsquo;en a encore beaucoup d&amp;rsquo;autres à regarder qui ne porte pas que sur  GWT mais sur les Test et les bonnes pratiques en général.&lt;/p&gt;

&lt;p&gt;Bon visionnage et surtout bon TDD à tous !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Critique du Livre &#39;Programmation GWT 2&#39;</title>
      <link>http://www.raphael-brugier.com/blog/critique-du-livre-programmation-gwt-2/</link>
      <pubDate>Thu, 28 Jan 2010 23:04:00 +0000</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/critique-du-livre-programmation-gwt-2/</guid>
      <description>&lt;p&gt;Je viens de terminer la lecture de &amp;ldquo;Programmation GWT 2&amp;rdquo; de Sami Jabber. Sorti quelques jours après la release finale de cette nouvelle version majeure du framework, il constitue un excellent point d&amp;rsquo;entrée à cette technologie autant qu&amp;rsquo;un approfondissement pour les connaisseurs.&lt;/p&gt;

&lt;p&gt;Bien que je connaisse déjà (un peu) GWT et que j&amp;rsquo;expérimente la version 2 depuis quelques mois, j&amp;rsquo;ai appris énormément avec ce livre. Et surtout j&amp;rsquo;ai pris beaucoup de plaisir à le lire! Les premiers chapitres constituent de bon rappel sur le fonctionnement général.&lt;/p&gt;

&lt;p&gt;Le chapitre sur RPC est assez surprenant puisque l&amp;rsquo;auteur invite à utiliser la version 2 de ce service, &lt;a href=&#34;http://code.google.com/intl/fr/webtoolkit/doc/latest/DevGuideServerCommunication.html#DevGuideDeRPC&#34;&gt;DeRPC (Direct-Eval RPC)&lt;/a&gt; &amp;hellip; alors qu&amp;rsquo;il n&amp;rsquo;a pas été publiés en version finale et que toutes les classes sont marqués &amp;ldquo;WARNING EXPERIMENTAL DO NOT USE !&amp;rdquo;. Personnellement je ne tenterais pas pour une production pro, mais c&amp;rsquo;est toujours intéressant de testé. Dans les tout cas, l&amp;rsquo;auteur propose &lt;a href=&#34;http://www.programmationgwt2.com/web/guest/chapitres/-/wiki/Main/Chapitre+7+-+Les+services+RPC&#34;&gt;une justification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Le chapitre sur J2EE propose un pattern vraiment très intéressant pour simplifier l&amp;rsquo;appel de services existant (spring, ejb) en évitant d&amp;rsquo;avoir à écrire des classes asynchrones.&lt;/p&gt;

&lt;p&gt;Pour moi, le gros plus de ce livre réside dans le chapitre &amp;ldquo;Sous le capot&amp;rdquo;. Il propose de plonger dans le coeur de GWT et décrit tout la mécanique de compilation JAVA vers JavaScript. C&amp;rsquo;est vraiment passionnant, et là on se rend bien compte de la prouesse technique qu&amp;rsquo;a nécessité la création de ce framework.&lt;/p&gt;

&lt;p&gt;Les derniers chapitres exposent les nouveautés de la version 2 avec plus de pédagogie que les tutoriels du site officiel, un bon point.&lt;/p&gt;

&lt;p&gt;Par contre, le chapitre sur les patterns est trop rapide à mon goût. Avec en plus la fin du chapitre dédié à la sécurité, je suis resté sur ma faim. Mais bon, ce n&amp;rsquo;est pas un livre sur les patterns et le lecteur pourra approfondir les patterns les plus intéressant par expérimentation par lui-même.&lt;/p&gt;

&lt;p&gt;Un avis très positif donc pour ce livre. Le premier livre sur GWT 2 est en français et il est bon !&lt;/p&gt;

&lt;p&gt;Nb : à noter qu&amp;rsquo;un &lt;a href=&#34;http://www.programmationgwt2.com&#34;&gt;WIKI&lt;/a&gt; est disponible pour corriger les coquilles du livre ou discuter avec l&amp;rsquo;auteur.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GWT Sortie de la version 2.0</title>
      <link>http://www.raphael-brugier.com/blog/gwt-sortie-de-la-version-2-0/</link>
      <pubDate>Thu, 10 Dec 2009 21:51:00 +0000</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/gwt-sortie-de-la-version-2-0/</guid>
      <description>

&lt;p&gt;Il y a quelques jours, Google a annoncé la sortie de la version 2 de son framework GWT.&lt;/p&gt;

&lt;p&gt;Cette nouvelle version majeur marque un tournant en apportant de nombreuses fonctionnalités destinées à faciliter la vie du développeur.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;accent à clairement été mis sur la rapidité dans cette nouvelle version, rapidité pour le développement et rapidité pour l&amp;rsquo;utilisateur final&lt;/p&gt;

&lt;h3 id=&#34;ui-binder&#34;&gt;UI Binder&lt;/h3&gt;

&lt;p&gt;L&amp;rsquo;UI Binder tout d&amp;rsquo;abord est une nouvelle façon de décrire les interfaces GWT de façons déclarative avec une syntaxe XML. L&amp;rsquo;utilisation d&amp;rsquo;UI Binder permet de séparer clairement l&amp;rsquo;interface de la logique l&amp;rsquo;application. Par la suite il sera donc facile de modifier l&amp;rsquo;interface de l&amp;rsquo;application. UI Binder à été complètement intégré au plugin google pour Eclipse, avec par exemple un wizard de création, la complétion du code, le refactoring, &amp;hellip;&lt;/p&gt;

&lt;p&gt;Un petit exemple pour comparer une interface écrite &amp;ldquo;à la&amp;rdquo; swing et avec UI Binder :&lt;/p&gt;

&lt;p&gt;En java :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final Label label = new Label(&amp;quot;Enter your name&amp;quot;);
final Button sendButton = new Button(&amp;quot;Send&amp;quot;);
HorizontalPanel hPanel = new HorizontalPanel();
hPanel.add(label);
VerticalPanel vPanel = new VerticalPanel();
vPanel.add(hPanel);
vPanel.add(button);&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Avec Ui binder :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;g:verticalpanel&amp;gt;
	&amp;lt;g:horizontalpanel&amp;gt;
		&amp;lt;g:label&amp;gt;Enter your name&amp;lt;/g:label&amp;gt;
	&amp;lt;/g:horizontalpanel&amp;gt;
	&amp;lt;g:button text=&amp;quot;Send&amp;quot; stylename=&amp;quot;{style.pretty}&amp;quot; ui:field=&amp;quot;button&amp;quot; /&amp;gt;
&amp;lt;/g:verticalpanel&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;development-mode&#34;&gt;Development mode&lt;/h3&gt;

&lt;p&gt;Sûrement la fonctionnalité qui va faire gagner le plus de temps aux développeurs. Exit le hosted mode, bonjour le development mode ! :)
Désormais, un simple plugin installé dans le browser remplace le navigateur de test qui était fournit. Le principe est toujours le même, une simple sauvegarde du fichier modifié et un refresh dans le navigateur permettent de voir les changements. Inutile de compiler en javascript pendant de longues minutes, le byte code java est utilisé à la place. Ceci permet donc par ailleurs de pouvoir tester en même temps le rendu dans plusieurs navigateurs.&lt;/p&gt;

&lt;h3 id=&#34;amélioration-du-code-compilé&#34;&gt;Amélioration du code compilé.&lt;/h3&gt;

&lt;p&gt;Comme à chaque nouvelle version, la qualité du code javascript produit par le compilateur est encore optimisée. Le simple fait donc de recompiler un projet avec cette nouvelle version devrait donc sensiblement améliorer les performances de votre applications web.&lt;/p&gt;

&lt;h3 id=&#34;code-splitting&#34;&gt;Code Splitting&lt;/h3&gt;

&lt;p&gt;Le code splitting part d&amp;rsquo;un constat simple : pourquoi télécharger la totalité du code javascript de l&amp;rsquo;application quand on pourrait télécharger à la demande à la manière du streaming ? Les ingénieurs GWT ont donc ajouté cette fonctionnalité et le premier bénéficiaire en est Wave qui a vu son temps de téléchargement initial considérablement diminué.
Le principe : différer le téléchargement des blocs indépendants de l&amp;rsquo;application. Quelques lignes de codes suffisent pour cela :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GWT.runAsync(new RunAsyncCallback() {
	public void onFailure(Throwable caught) {
		Window.alert(&amp;quot;Code download failed&amp;quot;);
	}             

	public void onSuccess() {
             Window.alert(&amp;quot;Hello, AJAX&amp;quot;);           
	}         
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;speed-tracer&#34;&gt;Speed Tracer&lt;/h3&gt;

&lt;p&gt;Un outil de profiling a été annoncé en même temps que cette nouvelle version de GWT. Speed tracer est en fait une extension pour Google Chrome qui permet de profiler les requêtes, les temps de parsing et les temps de rendus du navigateur. Speed tracer identifie automatiquement les problèmes de performances de votre application.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.raphael-brugier.com/posts/speedTracer.png&#34;&gt;&lt;img src=&#34;http://www.raphael-brugier.com/posts/speedTracer.png&#34; alt=&#34;speedTracer.png&#34; title=&#34;speedTracer.png, déc. 2009&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Avec cette nouvelle version de GWT, Google continue la guerre des RIA. L&amp;rsquo;ensemble des fonctionnalités permettra de diminuer le temps de développement et d&amp;rsquo;améliorer l&amp;rsquo;expérience utilisateur.&lt;/p&gt;

&lt;p&gt;Et bien sur, tout cela repose toujours sur les standards HTML 5 + CSS + Ajax donc inutile d&amp;rsquo;installer un plugin propriétaire dans le navigateur comme le demandent flash et silverlight.&lt;/p&gt;

&lt;p&gt;Le premier livre sur  GWT 2 devrait sortir très prochainement et la bonne nouvelle c&amp;rsquo;est qu&amp;rsquo;il est en français !&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est écrit par &lt;a href=&#34;http://www.dng-consulting.com/blogs/&#34;&gt;Sami Jabber&lt;/a&gt; et vous pouvez déjà &lt;a href=&#34;http://www.eyrolles.com/Accueil/Livre/programmation-gwt-2-9782212125696&#34;&gt;lire le sommaire et un chapitre entier&lt;/a&gt; ou &lt;a href=&#34;http://www.amazon.fr/Programmation-Concevoir-D%C3%A9velopper-Applications-Toolkit/dp/2212125690/ref=pd_sxp_grid_pt_0_0&#34;&gt;le commander ici&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;sources&#34;&gt;Sources :&lt;/h4&gt;

&lt;p&gt;Google camp fire on GWT and Speed Tracer : &lt;a href=&#34;http://www.youtube.com/watch?v=D2ibM4oufdM&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;http://www.youtube.com/watch?v=JQpuDB2Jxfg&amp;amp;amp;feature=channel&#34;&gt;part 2&lt;/a&gt;, &lt;a href=&#34;http://www.youtube.com/watch?v=QrnbKZ3hxls&amp;amp;amp;feature=channel&#34;&gt;part 3&lt;/a&gt;, &lt;a href=&#34;http://www.youtube.com/watch?v=WM6KPW8ZyjU&amp;amp;amp;feature=channel&#34;&gt;part 4&lt;/a&gt;, &lt;a href=&#34;http://www.youtube.com/watch?v=mnSNVfxK19Y&amp;amp;amp;feature=channel&#34;&gt;part 5&lt;/a&gt;, &lt;a href=&#34;http://www.youtube.com/watch?v=Kfh6IX-yhsc&amp;amp;amp;feature=channel&#34;&gt;part 6&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google IO mai 2009 : Best Practices For Architecting Your GWT App</title>
      <link>http://www.raphael-brugier.com/blog/google-io-mai-2009-best-practices-for-architecting-your-gwt-app/</link>
      <pubDate>Sun, 06 Sep 2009 14:34:00 +0000</pubDate>
      
      <guid>http://www.raphael-brugier.com/blog/google-io-mai-2009-best-practices-for-architecting-your-gwt-app/</guid>
      <description>

&lt;p&gt;Lors de la conférence annuelle de Google, en mai dernier, Ray Ryan à fait une présentation très intéressante sur les meilleures pratiques pour concevoir une application avec GWT. Cette présentation, a eu beaucoup d&amp;rsquo;écho dans la communauté GWT et plusieurs frameworks sont apparus pour faciliter l&amp;rsquo;implémentation de ces &amp;ldquo;bonne pratiques&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;object width=&#34;425&#34; height=&#34;344&#34;&gt;&lt;param name=&#34;movie&#34; value=&#34;http://www.youtube.com/v/PDuhR18-EdM&amp;hl=fr&amp;fs=1&amp;&#34; /&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34; /&gt;&lt;param name=&#34;allowscriptaccess&#34; value=&#34;always&#34; /&gt;&lt;embed src=&#34;http://www.youtube.com/v/PDuhR18-EdM&amp;hl=fr&amp;fs=1&amp;&#34; type=&#34;application/x-shockwave-flash&#34; allowscriptaccess=&#34;always&#34; allowfullscreen=&#34;true&#34; width=&#34;425&#34; height=&#34;344&#34;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;

&lt;p&gt;Voici un résumé sous forme de note de quelques points importants abordés dans cette présentation.&lt;/p&gt;

&lt;h4 id=&#34;ajax&#34;&gt;AJAX&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Il faut minimiser la taille des objets retournés au client. Par exemple en ayant une liste d&amp;rsquo;identifiants d&amp;rsquo;objets en attribut plutôt qu&amp;rsquo;une liste d&amp;rsquo;objets.&lt;/li&gt;
&lt;li&gt;Il faut spécifier le type d&amp;rsquo;une liste lorsque cela est possible:
&lt;code&gt;ArrayList&amp;lt;Object&amp;gt; maListe;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;plutôt que&lt;/p&gt;

&lt;p&gt;&lt;code&gt;List&amp;lt;Object&amp;gt; maListe;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;En effet, le compilateur GWT produira moins de code javascript s&amp;rsquo;il connaît plus précisément le type de liste.&lt;/p&gt;

&lt;h4 id=&#34;command-pattern&#34;&gt;Command Pattern&lt;/h4&gt;

&lt;p&gt;Le &amp;ldquo;Command Pattern&amp;rdquo; est un &lt;a href=&#34;http://dico.developpez.com/html/3161-Conception-Command-design-pattern-command.php&#34;&gt;pattern classique des IHM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Appliqué à GWT il permet de&amp;nbsp;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mettre en place plus facilement une solution de cache. Avant d&amp;rsquo;appeler un service, la commande execute vérifiera qu&amp;rsquo;elle n&amp;rsquo;a pas déjà la donnée.&lt;/li&gt;
&lt;li&gt;Mettre en place plus facilement des traitements par lots (batch).&lt;/li&gt;
&lt;li&gt;Centraliser les messages d&amp;rsquo;erreurs. Les onFailure() des réponses asynchrones pourront directement être implémenté dans la classe command.&lt;/li&gt;
&lt;li&gt;Découper le code javascript avec la méthode runAsync() de gwt 2.0  Les classes command qui encapsulent les services pourront être chargé par l&amp;rsquo;application que lorsque c&amp;rsquo;est nécessaire.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les exemples de code présentés:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/** Le nom Command est déjà utilisé dans GWT et est donc remplacé par Action */
interface Action&amp;lt;t extends response&amp;gt; { }

        interface Response { }

        interface ContactsService extends RemoteService {
        &amp;lt;t extends response&amp;gt; T execute(Action&amp;lt;t&amp;gt; action);
            }

            interface ContactsServiceAsync {
            void execute(Action&amp;lt;t&amp;gt; action, AsyncCallback&amp;lt;t&amp;gt; callback);
                }

                class GetDetails implements Action&amp;lt;getdetailsresponse&amp;gt; {
                    private final ArrayList&amp;lt;contactdetailid&amp;gt; ids;

                        public GetDetails(ArrayList&amp;lt;contactdetailid&amp;gt; ids) {
                            this.ids = ids;
                            }

                            public ArrayList&amp;lt;contactdetailid&amp;gt; getIds() {
                                return ids;
                                }
                                }

                                class GetDetailsResponse implements Response {
                                private final ArrayList&amp;lt;contactdetail&amp;gt; details;
                                    public GetDetailsResponse(ArrayList&amp;lt;contactdetail&amp;gt; details) {
                                        this.details = details;
                                        }
                                        public ArrayList&amp;lt;contactdetail&amp;gt; getDetails() {
                                            return new ArrayList&amp;lt;contactdetail&amp;gt;(details);
                                                }
                                                }

                                                abstract class GotDetails implements
                                                AsyncCallback&amp;lt;getdetailsresponse&amp;gt; {
                                                    public void onFailure(Throwable oops) {
                                                    /* default appwide failure handling */
                                                    }
                                                    public void onSuccess(GetDetailsResponse result) {
                                                    got(result.getDetails());
                                                    }
                                                    public abstract void got(ArrayList&amp;lt;contactdetail&amp;gt; details);
                                                        }

                                                        void showContact(final Contact contact) {
                                                        service.execute(new GetDetails(contact.getDetailIds()),
                                                        new GotDetails() {
                                                        public void got(ArrayList&amp;lt;contactdetail&amp;gt; details) {
                                                            renderContact(contact);
                                                            renderDetails(details);
                                                            }
                                                            });
                                                            }&amp;lt;/contactdetail&amp;gt;&amp;lt;/contactdetail&amp;gt;&amp;lt;/getdetailsresponse&amp;gt;&amp;lt;/contactdetail&amp;gt;&amp;lt;/contactdetail&amp;gt;&amp;lt;/contactdetail&amp;gt;&amp;lt;/contactdetail&amp;gt;&amp;lt;/contactdetailid&amp;gt;&amp;lt;/contactdetailid&amp;gt;&amp;lt;/contactdetailid&amp;gt;&amp;lt;/getdetailsresponse&amp;gt;&amp;lt;/t&amp;gt;&amp;lt;/t&amp;gt;&amp;lt;/t&amp;gt;&amp;lt;/t&amp;gt;&amp;lt;/t&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une librairie proposant une implémentation du command-pattern est disponible : &lt;a href=&#34;http://code.google.com/p/gwt-dispatch/&#34;&gt;gwt-dispatch&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;event-bus&#34;&gt;Event bus&lt;/h4&gt;

&lt;p&gt;Plutôt que d&amp;rsquo;enregistrer les composants graphiques entre eux et d&amp;rsquo;utiliser le classique &lt;em&gt;MVC&lt;/em&gt;, Ray recommande d&amp;rsquo;utiliser un &amp;ldquo;Event bus&amp;rdquo;. Chaque composant s&amp;rsquo;enregistre sur le bus (en fait un handlerManager) et reste à l&amp;rsquo;écoute d&amp;rsquo;événements.&lt;/p&gt;

&lt;h3 id=&#34;model-view-presenter-mvp&#34;&gt;Model-View-Presenter (MVP)&lt;/h3&gt;

&lt;p&gt;Le &amp;ldquo;&lt;a href=&#34;http://martinfowler.com/eaaDev/SupervisingPresenter.html&#34;&gt;Model-View-Presenter&lt;/a&gt;&amp;rdquo; pattern vient en remplacement du classique &lt;em&gt;MVC&lt;/em&gt; dans les applications GWT.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;utilisation de ce pattern facilite les Test Unitaires, seul la partie &amp;ldquo;Presenter&amp;rdquo; a besoin d&amp;rsquo;être testée. Les changements dans la partie &amp;ldquo;View&amp;rdquo; sont entièrement géré par la partie &amp;ldquo;Presenter&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Une librairie proposant une implémentation du MVP et de l&amp;rsquo;event-bus est disponible : &lt;a href=&#34;http://code.google.com/p/gwt-presenter/&#34;&gt;gwt-presenter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;injection-de-dépendance&#34;&gt;Injection de dépendance&lt;/h4&gt;

&lt;p&gt;L&amp;rsquo;injection de dépendance est réalisé du coté client avec le framework GIN et du coté serveur avec le framework GUICE. Je ne pense pas que ce soit nécessaire de rappeler les bénéfices de l&amp;rsquo;injection, Spring est là pour ça ;)&lt;/p&gt;

&lt;h4 id=&#34;test-unitaires&#34;&gt;Test unitaires&lt;/h4&gt;

&lt;p&gt;La partie &amp;ldquo;Presenter&amp;rdquo; du pattern MVP est facilement testable grace à l&amp;rsquo;utilisation de mock pour simuler la partie &amp;ldquo;View&amp;rdquo;. EasyMock ou d&amp;rsquo;autres frameworks simplifie la création de mock et des test unitaires.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>